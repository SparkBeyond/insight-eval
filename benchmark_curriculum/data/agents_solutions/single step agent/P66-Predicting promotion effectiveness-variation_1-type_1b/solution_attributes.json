{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "region_sales_performance",
        "competitor_price_ratio",
        "seasonal_holiday_effect"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.027145593167928042": {
            "name": "region_sales_performance",
            "code": "import pandas as pd\n\ndef region_sales_performance(row, aux_data: Dict[str, pd.DataFrame]):\n    # Access the customer_table dataframe from aux_data\n    customer_table = aux_data[\"customer_table.csv\"]\n    \n    # Ensure the row has a valid promotion_id\n    if \"promotion_id\" not in row or pd.isna(row[\"promotion_id\"]):\n        raise KeyError(\"The row does not contain a valid 'promotion_id'.\")\n    \n    # Check if the sales_table exists in aux_data\n    if \"sales_table.csv\" not in aux_data:\n        raise KeyError(\"The 'sales_table.csv' is missing from aux_data.\")\n    \n    # Access the sales_table dataframe\n    sales_table = aux_data[\"sales_table.csv\"]\n    \n    # Get the customer_id(s) associated with the given promotion_id\n    customer_ids = sales_table.loc[\n        sales_table[\"promotion_id\"] == row[\"promotion_id\"], \"customer_id\"\n    ]\n    \n    # If no customer_ids are found for the promotion_id, raise an error\n    if customer_ids.empty:\n        raise ValueError(f\"No customers found for promotion_id {row['promotion_id']}.\")\n    \n    # Filter the customer_table for the relevant customer_ids\n    relevant_customers = customer_table[customer_table[\"customer_id\"].isin(customer_ids)]\n    \n    # If no relevant customers are found, raise an error\n    if relevant_customers.empty:\n        raise ValueError(f\"No matching customers found in customer_table for promotion_id {row['promotion_id']}.\")\n    \n    # Get the location(s) of the relevant customers\n    locations = relevant_customers[\"location\"].unique()\n    \n    # Calculate the mean loyalty score for all customers in the same locations\n    location_sales = customer_table[customer_table[\"location\"].isin(locations)][\"loyalty_score\"]\n    \n    # Return the mean loyalty score for the locations\n    return location_sales.mean()\n"
        },
        "0.008545552619165262": {
            "name": "competitor_price_ratio",
            "code": "import pandas as pd\n\ndef competitor_price_ratio(row, df_train: pd.DataFrame, aux_data: Dict[str, pd.DataFrame]):\n    # Extract auxiliary dataframes\n    competitor_data = aux_data.get(\"competitor_table.csv\", pd.DataFrame())\n    sales = aux_data.get(\"sales_table.csv\", pd.DataFrame())\n    \n    # Check if the required columns exist in the sales table\n    if \"customer_id\" not in sales.columns:\n        raise KeyError(\"The 'customer_id' column is missing in the sales table.\")\n    if \"product_id\" not in sales.columns or \"price_per_unit\" not in sales.columns:\n        raise KeyError(\"The 'product_id' or 'price_per_unit' column is missing in the sales table.\")\n    if \"product_id\" not in competitor_data.columns or \"competitor_price\" not in competitor_data.columns:\n        raise KeyError(\"The 'product_id' or 'competitor_price' column is missing in the competitor table.\")\n    \n    # Check if the row contains a 'promotion_id' column\n    if \"promotion_id\" not in row:\n        raise KeyError(\"The 'promotion_id' column is missing in the input row.\")\n    \n    # Get the promotion_id from the row\n    promotion_id = row[\"promotion_id\"]\n    \n    # Find the product_id associated with the promotion_id in the sales table\n    promotion_sales = sales[sales[\"promotion_id\"] == promotion_id]\n    \n    if promotion_sales.empty:\n        # If no sales data is found for the promotion, return 0\n        return 0\n    \n    # Get the product_id (use the first one if there are multiple)\n    product_id = promotion_sales[\"product_id\"].iloc[0]\n    \n    # Get competitor prices for the product_id\n    comp_prices = competitor_data[competitor_data[\"product_id\"] == product_id][\"competitor_price\"]\n    avg_comp_price = comp_prices.mean() if not comp_prices.empty else 0\n    \n    # Get the minimum price_per_unit from the sales table\n    min_price_per_unit = sales[\"price_per_unit\"].min() if \"price_per_unit\" in sales.columns else 1\n    \n    # Avoid division by zero\n    if min_price_per_unit == 0:\n        return 0\n    \n    # Calculate and return the competitor price ratio\n    return avg_comp_price / min_price_per_unit\n"
        },
        "0": {
            "name": "seasonal_holiday_effect",
            "code": "import pandas as pd\n\ndef seasonal_holiday_effect(row, df_train: pd.DataFrame, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the necessary auxiliary dataframes\n    seasonal = aux_data.get(\"seasonal_table.csv\", pd.DataFrame())\n    sales = aux_data.get(\"sales_table.csv\", pd.DataFrame())\n    \n    # Ensure the required columns exist in the sales dataframe\n    if \"customer_id\" not in sales.columns or \"date\" not in sales.columns:\n        raise KeyError(\"The 'sales_table.csv' dataframe must contain 'customer_id' and 'date' columns.\")\n    \n    # Check if the input row contains a 'customer_id' column\n    if \"customer_id\" not in row:\n        # If 'customer_id' is not in the row, return 0 as we cannot proceed\n        return 0\n    \n    # Get the first transaction date for the customer\n    customer_id = row[\"customer_id\"]\n    customer_sales = sales[sales[\"customer_id\"] == customer_id]\n    \n    if customer_sales.empty:\n        # If no sales data is found for the customer, return 0\n        return 0\n    \n    # Get the earliest transaction date for the customer\n    date = pd.to_datetime(customer_sales[\"date\"].min())\n    transaction_month = date.month\n    \n    # Filter the seasonal data for the corresponding month\n    if \"month\" not in seasonal.columns or \"holiday_weeks\" not in seasonal.columns:\n        raise KeyError(\"The 'seasonal_table.csv' dataframe must contain 'month' and 'holiday_weeks' columns.\")\n    \n    holiday_data = seasonal[seasonal[\"month\"] == transaction_month]\n    \n    # Return the holiday weeks value if available, otherwise return 0\n    return holiday_data[\"holiday_weeks\"].values[0] if not holiday_data.empty else 0\n"
        }
    },
    "feature_descriptions": [
        "region sales performance",
        "competitor price ratio",
        "seasonal holiday effect"
    ]
}