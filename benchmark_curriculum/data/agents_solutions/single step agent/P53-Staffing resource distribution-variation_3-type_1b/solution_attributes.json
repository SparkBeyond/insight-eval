{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "customers_per_employee",
        "weighted_customer_satisfaction",
        "customer_density",
        "profitability",
        "branch_revenue_contribution",
        "revenue_to_operational_cost_ratio",
        "productivity_efficiency",
        "skill_encoding",
        "peak_hours_duration"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.411150182820768": {
            "name": "customers_per_employee",
            "code": "import numpy as np\n\ndef customers_per_employee(row: pd.Series, aux_data: Dict[str, pd.DataFrame]) -> float:\n    \"\"\"Calculates the number of customers serviced per employee for a given branch.\"\"\"\n    branch_id = row['branch_id']\n    \n    # Retrieve the number of employees for the branch from the staffing_levels_table\n    staffing_df = aux_data['staffing_levels_table.csv']\n    employees_row = staffing_df[staffing_df['branch_id'] == branch_id]\n    \n    if employees_row.empty:\n        # If no data is found for the branch, return NaN\n        return np.nan\n    \n    number_of_employees = employees_row['number_of_employees'].iloc[0]\n    \n    # Retrieve the number of customers for the branch from the customer_traffic_table\n    traffic_df = aux_data['customer_traffic_table.csv']\n    customers_row = traffic_df[traffic_df['branch_id'] == branch_id]\n    \n    if customers_row.empty:\n        # If no data is found for the branch, return NaN\n        return np.nan\n    \n    number_of_customers = customers_row['number_of_customers'].sum()  # Sum in case of multiple rows for the branch\n    \n    # Handle division by zero\n    if number_of_employees == 0:\n        return np.nan\n    \n    # Calculate and return the customers per employee\n    return number_of_customers / number_of_employees\n"
        },
        "0.3965302328879694": {
            "name": "weighted_customer_satisfaction",
            "code": "import numpy as np\n\ndef weighted_customer_satisfaction(row, aux_data: Dict[str, pd.DataFrame]):\n    \"\"\"Calculates customer satisfaction weighted against traffic and efficiency.\"\"\"\n    # Retrieve the customer traffic data from aux_data\n    customer_traffic_df = aux_data.get('customer_traffic_table.csv')\n    \n    if customer_traffic_df is None:\n        raise ValueError(\"The 'customer_traffic_table.csv' file is missing from aux_data.\")\n    \n    # Find the number_of_customers for the branch_id in the current row\n    branch_id = row['branch_id']\n    traffic_data = customer_traffic_df[customer_traffic_df['branch_id'] == branch_id]\n    \n    if traffic_data.empty:\n        return np.nan  # If no traffic data is found for the branch, return NaN\n    \n    # Assume the most recent traffic data is relevant (if there are multiple rows for the same branch_id)\n    number_of_customers = traffic_data['number_of_customers'].iloc[-1]\n    \n    # Check for zero values to avoid division by zero\n    if number_of_customers == 0 or row['employee_efficiency'] == 0:\n        return np.nan\n    \n    # Perform the weighted customer satisfaction calculation\n    return row['customer_satisfaction'] * number_of_customers / row['employee_efficiency']\n"
        },
        "0.26671586901192035": {
            "name": "customer_density",
            "code": "import numpy as np\n\ndef customer_density(row, aux_data: Dict[str, pd.DataFrame]):\n    \"\"\"Calculates customer density as a function of traffic and staffing.\"\"\"\n    # Extract branch_id from the row\n    branch_id = row['branch_id']\n    \n    # Get the relevant data from aux_data\n    traffic_df = aux_data['customer_traffic_table.csv']\n    staffing_df = aux_data['staffing_levels_table.csv']\n    \n    # Filter the dataframes for the current branch_id\n    traffic_data = traffic_df[traffic_df['branch_id'] == branch_id]\n    staffing_data = staffing_df[staffing_df['branch_id'] == branch_id]\n    \n    # Ensure we have data for the branch\n    if traffic_data.empty or staffing_data.empty:\n        return np.nan\n    \n    # Extract the required values\n    number_of_customers = traffic_data['number_of_customers'].iloc[0]\n    number_of_employees = staffing_data['number_of_employees'].iloc[0]\n    average_experience = staffing_data['average_experience'].iloc[0]\n    \n    # Handle cases where number_of_employees or average_experience is 0\n    if average_experience == 0 or number_of_employees == 0:\n        return np.nan\n    \n    # Calculate and return customer density\n    return number_of_customers / (number_of_employees * average_experience)\n"
        },
        "0.10371602787293914": {
            "name": "profitability",
            "code": "\n\ndef profitability(row, aux_data: Dict[str, pd.DataFrame]):\n    \"\"\"Calculates profitability as revenue minus operational cost.\"\"\"\n    # Extract the financial metrics dataframe from aux_data\n    financial_metrics_df = aux_data['financial_metrics_table.csv']\n    \n    # Find the financial data for the given branch_id\n    branch_id = row['branch_id']\n    financial_data = financial_metrics_df[financial_metrics_df['branch_id'] == branch_id]\n    \n    # Ensure there is exactly one matching row\n    if financial_data.empty:\n        raise ValueError(f\"No financial data found for branch_id {branch_id}\")\n    if len(financial_data) > 1:\n        raise ValueError(f\"Multiple financial data entries found for branch_id {branch_id}\")\n    \n    # Extract revenue and operational cost\n    revenue = financial_data.iloc[0]['revenue']\n    operational_cost = financial_data.iloc[0]['operational_cost']\n    \n    # Calculate and return profitability\n    return revenue - operational_cost\n"
        },
        "0.08849114803820454": {
            "name": "branch_revenue_contribution",
            "code": "import numpy as np\n\ndef branch_revenue_contribution(row, df_train: pd.DataFrame, aux_data: Dict[str, pd.DataFrame]):\n    \"\"\"Calculates branch's proportional revenue contribution.\"\"\"\n    # Ensure we are using the correct dataframe for revenue\n    if 'financial_metrics_table.csv' not in aux_data:\n        raise ValueError(\"The required 'financial_metrics_table.csv' is missing in aux_data.\")\n    \n    financial_metrics_df = aux_data['financial_metrics_table.csv']\n    \n    # Check if the 'revenue' column exists in the financial metrics dataframe\n    if 'revenue' not in financial_metrics_df.columns:\n        raise ValueError(\"The 'revenue' column is missing in the financial metrics dataframe.\")\n    \n    # Calculate the total revenue\n    total_revenue = financial_metrics_df['revenue'].sum()\n    \n    # Handle the case where total revenue is zero\n    if total_revenue == 0:\n        return np.nan\n    \n    # Ensure the row has a 'branch_id' column to match with the financial metrics dataframe\n    if 'branch_id' not in row or 'branch_id' not in financial_metrics_df.columns:\n        raise ValueError(\"The 'branch_id' column is missing in the input row or financial metrics dataframe.\")\n    \n    # Get the revenue for the specific branch\n    branch_revenue = financial_metrics_df.loc[\n        financial_metrics_df['branch_id'] == row['branch_id'], 'revenue'\n    ]\n    \n    # If the branch_id is not found in the financial metrics dataframe, return NaN\n    if branch_revenue.empty:\n        return np.nan\n    \n    # Calculate and return the proportional revenue contribution\n    return branch_revenue.iloc[0] / total_revenue\n"
        },
        "0.07886327017306659": {
            "name": "revenue_to_operational_cost_ratio",
            "code": "import numpy as np\n\ndef revenue_to_operational_cost_ratio(row, aux_data: Dict[str, pd.DataFrame]):\n    \"\"\"Calculates the ratio of revenue to operational cost for a given row using auxiliary data.\"\"\"\n    # Extract the branch_id from the row\n    branch_id = row['branch_id']\n    \n    # Get the financial metrics table from aux_data\n    financial_metrics = aux_data.get('financial_metrics_table.csv')\n    \n    if financial_metrics is None:\n        raise ValueError(\"The financial_metrics_table.csv is missing from aux_data.\")\n    \n    # Filter the financial metrics table for the given branch_id\n    branch_financial_data = financial_metrics[financial_metrics['branch_id'] == branch_id]\n    \n    if branch_financial_data.empty:\n        # If no financial data is found for the branch, return NaN\n        return np.nan\n    \n    # Extract revenue and operational_cost for the branch\n    revenue = branch_financial_data['revenue'].iloc[0]\n    operational_cost = branch_financial_data['operational_cost'].iloc[0]\n    \n    # Handle division by zero\n    if operational_cost == 0:\n        return np.nan\n    \n    # Calculate and return the ratio\n    return revenue / operational_cost\n"
        },
        "0.041486195188256775": {
            "name": "productivity_efficiency",
            "code": "import numpy as np\n\ndef productivity_efficiency(row, aux_data: Dict[str, pd.DataFrame]):\n    \"\"\"Derives overall efficiency based on traffic, costs, and staffing.\"\"\"\n    # Extract the branch_id from the row\n    branch_id = row['branch_id']\n    \n    # Retrieve the relevant dataframes from aux_data\n    financial_metrics = aux_data['financial_metrics_table.csv']\n    staffing_levels = aux_data['staffing_levels_table.csv']\n    \n    # Filter the financial and staffing data for the given branch_id\n    financial_row = financial_metrics[financial_metrics['branch_id'] == branch_id]\n    staffing_row = staffing_levels[staffing_levels['branch_id'] == branch_id]\n    \n    # Ensure we have exactly one matching row for both financial and staffing data\n    if financial_row.empty or staffing_row.empty:\n        return np.nan  # Return NaN if no matching data is found\n    if len(financial_row) > 1 or len(staffing_row) > 1:\n        raise ValueError(f\"Multiple rows found for branch_id {branch_id} in aux_data.\")\n    \n    # Extract the required values\n    operational_cost = financial_row.iloc[0]['operational_cost']\n    number_of_employees = staffing_row.iloc[0]['number_of_employees']\n    number_of_customers = row['employee_efficiency']  # Assuming this is the correct column\n    \n    # Handle division by zero\n    if operational_cost == 0 or number_of_employees == 0:\n        return np.nan\n    \n    # Calculate and return the productivity efficiency\n    return number_of_customers / (number_of_employees * operational_cost)\n"
        },
        "0.008809171077066734": {
            "name": "skill_encoding",
            "code": "import numpy as np\n\ndef skill_encoding(row, aux_data: Dict[str, pd.DataFrame]):\n    \"\"\"Encodes skill levels (categorical) into numerical values using the staffing_levels_table.csv.\"\"\"\n    # Ensure we are working with the correct dataframe\n    staffing_df = aux_data.get('staffing_levels_table.csv')\n    \n    if staffing_df is None:\n        raise ValueError(\"The 'staffing_levels_table.csv' dataframe is missing from aux_data.\")\n    \n    # Match the branch_id in the row with the branch_id in the staffing dataframe\n    branch_id = row['branch_id']\n    skill_level_row = staffing_df[staffing_df['branch_id'] == branch_id]\n    \n    if skill_level_row.empty:\n        # If no matching branch_id is found, return NaN\n        return np.nan\n    \n    # Extract the skill_level value\n    skill_level = skill_level_row.iloc[0]['skill_level']\n    \n    # Map the skill level to a numerical value\n    skill_map = {'Beginner': 1, 'Intermediate': 2, 'Advanced': 3}\n    return skill_map.get(skill_level, np.nan)\n"
        },
        "0.008585585970026158": {
            "name": "peak_hours_duration",
            "code": "\n\ndef peak_hours_duration(row, aux_data: Dict[str, pd.DataFrame]):\n    \"\"\"Extracts the duration of peak hours from the peak_hours column in the customer_traffic_table.csv.\"\"\"\n    # Get the customer_traffic_table dataframe from aux_data\n    customer_traffic_df = aux_data['customer_traffic_table.csv']\n    \n    # Find the corresponding row in the customer_traffic_table based on branch_id\n    branch_id = row['branch_id']\n    peak_hours_row = customer_traffic_df[customer_traffic_df['branch_id'] == branch_id]\n    \n    # Ensure the branch_id exists in the customer_traffic_table\n    if peak_hours_row.empty:\n        raise ValueError(f\"No matching branch_id {branch_id} found in customer_traffic_table.csv\")\n    \n    # Extract the peak_hours value\n    peak_hours = peak_hours_row.iloc[0]['peak_hours']\n    \n    # Parse the peak_hours string and calculate the duration\n    start, end = map(int, peak_hours.split('-'))\n    return end - start\n"
        }
    },
    "feature_descriptions": [
        "customers per employee",
        "weighted customer satisfaction",
        "customer density",
        "profitability",
        "branch revenue contribution",
        "revenue to operational cost ratio",
        "productivity efficiency",
        "skill encoding",
        "peak hours duration"
    ]
}