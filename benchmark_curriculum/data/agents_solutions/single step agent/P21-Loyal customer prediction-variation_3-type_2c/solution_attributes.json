{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "days_since_last_support",
        "support_resolved_ratio",
        "num_support_tickets",
        "click_through_rate",
        "cross_engaged_in_marketing_and_support",
        "support_escalation_rate",
        "total_transactions_count",
        "total_transaction_amount",
        "transaction_frequency",
        "days_since_last_transaction",
        "median_transaction_amount",
        "max_transaction_amount",
        "total_campaigns_sent",
        "days_since_first_campaign",
        "avg_transaction_amount",
        "avg_ticket_resolution_time",
        "total_days_active",
        "high_value_transactions_count"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.2874485344164994": {
            "name": "days_since_last_support",
            "code": "import pandas as pd\nimport numpy as np\n\ndef days_since_last_support(row, aux_data: Dict[str, pd.DataFrame]):\n    # Access the correct dataframe using the correct key\n    support_df = aux_data[\"customer_support_interactions.csv\"]\n    \n    # Filter the dataframe for the specific customer_id\n    customer_data = support_df[support_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # If no interactions exist for the customer, return NaN\n    if customer_data.empty:\n        return np.nan\n    \n    # Parse the 'interaction_date' column to datetime and find the most recent interaction\n    last_interaction = pd.to_datetime(customer_data[\"interaction_date\"]).max()\n    \n    # Calculate the number of days since the last interaction\n    return (pd.Timestamp(\"now\") - last_interaction).days\n"
        },
        "0.2560237431757088": {
            "name": "support_resolved_ratio",
            "code": "\n\ndef support_resolved_ratio(row, aux_data: Dict[str, pd.DataFrame]):\n    # Access the correct key in the aux_data dictionary\n    support_df = aux_data[\"customer_support_interactions.csv\"]\n    \n    # Filter the dataframe for the specific customer_id\n    customer_data = support_df[support_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # If no interactions exist for the customer, return 0\n    if customer_data.shape[0] == 0:\n        return 0\n    \n    # Calculate the ratio of resolved interactions\n    return customer_data[\"was_resolved\"].sum() / customer_data.shape[0]\n"
        },
        "0.24573189433084175": {
            "name": "num_support_tickets",
            "code": "\n\ndef num_support_tickets(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> int:\n    # Check if the key 'customer_support_interactions' exists in aux_dataframes\n    if \"customer_support_interactions.csv\" not in aux_dataframes:\n        raise KeyError(\"The key 'customer_support_interactions.csv' is missing from aux_dataframes.\")\n    \n    # Retrieve the customer support interactions dataframe\n    support_df = aux_dataframes[\"customer_support_interactions.csv\"]\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {\"customer_id\"}\n    if not required_columns.issubset(support_df.columns):\n        raise ValueError(f\"The dataframe 'customer_support_interactions.csv' is missing required columns: {required_columns - set(support_df.columns)}\")\n    \n    # Count the number of support tickets for the given customer_id\n    return support_df[support_df[\"customer_id\"] == row[\"customer_id\"]].shape[0]\n"
        },
        "0.21221268252710987": {
            "name": "click_through_rate",
            "code": "\n\ndef click_through_rate(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key matches the filename in aux_data\n    if \"marketing_engagement.csv\" not in aux_data:\n        raise KeyError(\"The key 'marketing_engagement.csv' is not found in aux_data.\")\n    \n    # Access the marketing_engagement dataframe\n    marketing_df = aux_data[\"marketing_engagement.csv\"]\n    \n    # Filter the dataframe for the specific customer_id\n    customer_data = marketing_df[marketing_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # If no data exists for the customer, return 0\n    if customer_data.shape[0] == 0:\n        return 0\n    \n    # Calculate the click-through rate using the 'response' column\n    # Assuming 'response' is a binary column where 1 indicates a click\n    return customer_data[\"response\"].sum() / customer_data.shape[0]\n"
        },
        "0.2085479292722942": {
            "name": "cross_engaged_in_marketing_and_support",
            "code": "\n\ndef cross_engaged_in_marketing_and_support(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the required keys exist in the aux_data dictionary\n    if \"customer_support_interactions.csv\" not in aux_data or \"marketing_engagement.csv\" not in aux_data:\n        raise KeyError(\"Required dataframes are missing from aux_data. Ensure 'customer_support_interactions.csv' and 'marketing_engagement.csv' are provided.\")\n    \n    # Load the required dataframes\n    support_df = aux_data[\"customer_support_interactions.csv\"]\n    marketing_df = aux_data[\"marketing_engagement.csv\"]\n    \n    # Ensure the required columns exist in the dataframes\n    required_support_columns = {\"customer_id\"}\n    required_marketing_columns = {\"customer_id\"}\n    \n    if not required_support_columns.issubset(support_df.columns):\n        raise KeyError(f\"Missing required columns in 'customer_support_interactions.csv': {required_support_columns - set(support_df.columns)}\")\n    if not required_marketing_columns.issubset(marketing_df.columns):\n        raise KeyError(f\"Missing required columns in 'marketing_engagement.csv': {required_marketing_columns - set(marketing_df.columns)}\")\n    \n    # Check if the customer has interacted with support\n    interacted_with_support = not support_df[support_df[\"customer_id\"] == row[\"customer_id\"]].empty\n    \n    # Check if the customer has interacted with marketing campaigns\n    interacted_with_marketing = not marketing_df[marketing_df[\"customer_id\"] == row[\"customer_id\"]].empty\n    \n    # Return 1 if they engaged with both, 0 otherwise\n    return int(interacted_with_support and interacted_with_marketing)\n"
        },
        "0.12663556933012426": {
            "name": "support_escalation_rate",
            "code": "\n\ndef support_escalation_rate(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'customer_support_interactions.csv' exists in aux_dataframes\n    if \"customer_support_interactions.csv\" not in aux_dataframes:\n        raise KeyError(\"'customer_support_interactions.csv' not found in aux_dataframes\")\n    \n    # Get the customer support interactions dataframe\n    support_df = aux_dataframes[\"customer_support_interactions.csv\"]\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {\"customer_id\", \"was_resolved\"}\n    if not required_columns.issubset(support_df.columns):\n        raise KeyError(f\"Missing required columns in 'customer_support_interactions.csv'. \"\n                       f\"Expected columns: {required_columns}\")\n    \n    # Filter the dataframe for the specific customer_id\n    customer_data = support_df[support_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # If no interactions exist for the customer, return 0\n    if customer_data.shape[0] == 0:\n        return 0\n    \n    # Calculate the number of escalated interactions (not resolved)\n    escalated_count = (customer_data[\"was_resolved\"] == False).sum()\n    \n    # Calculate and return the escalation rate\n    return escalated_count / customer_data.shape[0]\n"
        },
        "0.08955312036886891": {
            "name": "total_transactions_count",
            "code": "\n\ndef total_transactions_count(row, aux_data: Dict[str, pd.DataFrame]):\n    # Check if the key 'customer_transactions.csv' exists in aux_data\n    if \"customer_transactions.csv\" not in aux_data:\n        raise KeyError(\"'customer_transactions.csv' not found in aux_data\")\n    \n    # Access the customer_transactions dataframe\n    transactions_df = aux_data[\"customer_transactions.csv\"]\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {\"customer_id\"}\n    if not required_columns.issubset(transactions_df.columns):\n        raise KeyError(f\"Missing required columns in 'customer_transactions.csv': {required_columns - set(transactions_df.columns)}\")\n    \n    # Filter the dataframe for the given customer_id and return the count of transactions\n    return transactions_df[transactions_df[\"customer_id\"] == row[\"customer_id\"]].shape[0]\n"
        },
        "0.08568924734081752": {
            "name": "total_transaction_amount",
            "code": "\n\ndef total_transaction_amount(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> float:\n    # Check if 'customer_transactions' exists in aux_dataframes\n    if \"customer_transactions.csv\" not in aux_dataframes:\n        raise KeyError(\"'customer_transactions.csv' not found in aux_dataframes\")\n    \n    # Access the customer_transactions dataframe\n    transactions_df = aux_dataframes[\"customer_transactions.csv\"]\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {\"customer_id\", \"transaction_amount\"}\n    if not required_columns.issubset(transactions_df.columns):\n        raise KeyError(f\"The dataframe 'customer_transactions.csv' is missing required columns: {required_columns - set(transactions_df.columns)}\")\n    \n    # Filter transactions for the given customer_id and calculate the total transaction amount\n    customer_id = row[\"customer_id\"]\n    total_amount = transactions_df[transactions_df[\"customer_id\"] == customer_id][\"transaction_amount\"].sum()\n    \n    return total_amount\n"
        },
        "0.04895580676344841": {
            "name": "transaction_frequency",
            "code": "import pandas as pd\nimport numpy as np\n\ndef transaction_frequency(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key 'customer_transactions' exists in aux_data\n    if \"customer_transactions.csv\" not in aux_data:\n        raise KeyError(\"'customer_transactions.csv' not found in aux_data\")\n    \n    # Access the customer_transactions dataframe\n    transactions_df = aux_data[\"customer_transactions.csv\"]\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {\"customer_id\", \"transaction_date\"}\n    if not required_columns.issubset(transactions_df.columns):\n        raise KeyError(f\"Missing required columns in 'customer_transactions.csv': {required_columns - set(transactions_df.columns)}\")\n    \n    # Filter transactions for the given customer_id\n    customer_data = transactions_df[transactions_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # Convert transaction_date to datetime and sort\n    dates = pd.to_datetime(customer_data[\"transaction_date\"], errors='coerce').dropna().sort_values()\n    \n    # If there are fewer than 2 transactions, return NaN\n    if len(dates) < 2:\n        return np.nan\n    \n    # Calculate the average difference in days between transactions\n    return dates.diff().mean().days\n"
        },
        "0.040599463903265985": {
            "name": "days_since_last_transaction",
            "code": "import pandas as pd\nimport numpy as np\n\ndef days_since_last_transaction(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key 'customer_transactions.csv' exists in aux_data\n    if \"customer_transactions.csv\" not in aux_data:\n        raise KeyError(\"'customer_transactions.csv' not found in aux_data\")\n    \n    # Get the transactions dataframe\n    transactions_df = aux_data[\"customer_transactions.csv\"]\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {\"customer_id\", \"transaction_date\"}\n    if not required_columns.issubset(transactions_df.columns):\n        raise KeyError(f\"Missing required columns in 'customer_transactions.csv': {required_columns - set(transactions_df.columns)}\")\n    \n    # Filter transactions for the given customer_id\n    customer_data = transactions_df[transactions_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # If no transactions exist for the customer, return NaN\n    if customer_data.empty:\n        return np.nan\n    \n    # Convert transaction_date to datetime and find the most recent transaction\n    customer_data[\"transaction_date\"] = pd.to_datetime(customer_data[\"transaction_date\"], errors=\"coerce\")\n    last_transaction = customer_data[\"transaction_date\"].max()\n    \n    # If the last transaction date is NaT (invalid date), return NaN\n    if pd.isna(last_transaction):\n        return np.nan\n    \n    # Calculate the number of days since the last transaction\n    return (pd.Timestamp(\"now\") - last_transaction).days\n"
        },
        "0.03707458638452444": {
            "name": "median_transaction_amount",
            "code": "\n\ndef median_transaction_amount(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key 'customer_transactions' exists in aux_data\n    if \"customer_transactions.csv\" not in aux_data:\n        raise KeyError(\"'customer_transactions.csv' not found in aux_data\")\n    \n    # Access the customer_transactions dataframe\n    transactions_df = aux_data[\"customer_transactions.csv\"]\n    \n    # Ensure the dataframe contains the expected columns\n    required_columns = {\"customer_id\", \"transaction_amount\"}\n    if not required_columns.issubset(transactions_df.columns):\n        raise ValueError(f\"The dataframe 'customer_transactions.csv' must contain the columns: {required_columns}\")\n    \n    # Filter transactions for the given customer_id\n    customer_data = transactions_df[transactions_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # Return the median transaction amount or 0 if no transactions exist\n    return customer_data[\"transaction_amount\"].median() if not customer_data.empty else 0\n"
        },
        "0.03560720675188542": {
            "name": "max_transaction_amount",
            "code": "\n\ndef max_transaction_amount(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> float:\n    # Ensure the key exists in the aux_dataframes dictionary\n    if \"customer_transactions.csv\" not in aux_dataframes:\n        raise KeyError(\"The key 'customer_transactions.csv' is missing from aux_dataframes.\")\n    \n    # Access the customer_transactions dataframe\n    transactions_df = aux_dataframes[\"customer_transactions.csv\"]\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {\"customer_id\", \"transaction_amount\"}\n    if not required_columns.issubset(transactions_df.columns):\n        raise KeyError(f\"The dataframe 'customer_transactions.csv' is missing one or more required columns: {required_columns}\")\n    \n    # Filter the transactions for the given customer_id\n    customer_data = transactions_df[transactions_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # Return the maximum transaction amount or 0 if no transactions exist\n    return customer_data[\"transaction_amount\"].max() if not customer_data.empty else 0\n"
        },
        "0.03512880160533912": {
            "name": "total_campaigns_sent",
            "code": "\n\ndef total_campaigns_sent(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> int:\n    # Check if the key 'marketing_engagement' exists in the aux_dataframes dictionary\n    if \"marketing_engagement.csv\" not in aux_dataframes:\n        raise KeyError(\"The key 'marketing_engagement.csv' is missing from aux_dataframes.\")\n    \n    # Retrieve the marketing_engagement dataframe\n    marketing_df = aux_dataframes[\"marketing_engagement.csv\"]\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {\"customer_id\"}\n    if not required_columns.issubset(marketing_df.columns):\n        raise ValueError(f\"The dataframe 'marketing_engagement.csv' is missing required columns: {required_columns - set(marketing_df.columns)}\")\n    \n    # Filter the dataframe for the given customer_id and return the count of rows\n    return marketing_df[marketing_df[\"customer_id\"] == row[\"customer_id\"]].shape[0]\n"
        },
        "0.03353676351186022": {
            "name": "days_since_first_campaign",
            "code": "import pandas as pd\nimport numpy as np\n\ndef days_since_first_campaign(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key 'marketing_engagement' exists in aux_data\n    if \"marketing_engagement.csv\" not in aux_data:\n        raise KeyError(\"'marketing_engagement.csv' not found in aux_data\")\n    \n    # Access the marketing_engagement dataframe\n    marketing_df = aux_data[\"marketing_engagement.csv\"]\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {\"customer_id\", \"engagement_date\"}\n    if not required_columns.issubset(marketing_df.columns):\n        raise KeyError(f\"Missing required columns in marketing_engagement.csv: {required_columns - set(marketing_df.columns)}\")\n    \n    # Filter the dataframe for the specific customer\n    customer_data = marketing_df[marketing_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # If no data exists for the customer, return NaN\n    if customer_data.empty:\n        return np.nan\n    \n    # Convert the engagement_date column to datetime\n    customer_data[\"engagement_date\"] = pd.to_datetime(customer_data[\"engagement_date\"], errors=\"coerce\")\n    \n    # Find the earliest engagement date\n    first_interaction = customer_data[\"engagement_date\"].min()\n    \n    # If the first_interaction is NaT (not a valid date), return NaN\n    if pd.isna(first_interaction):\n        return np.nan\n    \n    # Calculate the number of days since the first interaction\n    return (pd.Timestamp(\"now\") - first_interaction).days\n"
        },
        "0.03306332663565898": {
            "name": "avg_transaction_amount",
            "code": "\n\ndef avg_transaction_amount(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key exists in the aux_data dictionary\n    if \"customer_transactions.csv\" not in aux_data:\n        raise KeyError(\"The key 'customer_transactions.csv' is missing from aux_data.\")\n    \n    # Access the customer_transactions dataframe\n    transactions_df = aux_data[\"customer_transactions.csv\"]\n    \n    # Ensure the dataframe contains the expected columns\n    expected_columns = {'transaction_id', 'customer_id', 'transaction_date', 'transaction_amount', 'product_category'}\n    if not expected_columns.issubset(transactions_df.columns):\n        raise ValueError(f\"The dataframe 'customer_transactions.csv' is missing one or more required columns: {expected_columns}\")\n    \n    # Filter transactions for the given customer_id\n    customer_data = transactions_df[transactions_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # Calculate and return the average transaction amount, or 0 if no transactions exist\n    return customer_data[\"transaction_amount\"].mean() if not customer_data.empty else 0\n"
        },
        "0.013952760630092074": {
            "name": "avg_ticket_resolution_time",
            "code": "import numpy as np\n\ndef avg_ticket_resolution_time(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key exists in the aux_data dictionary\n    if \"customer_support_interactions.csv\" not in aux_data:\n        return np.nan\n    \n    # Get the customer support interactions dataframe\n    support_df = aux_data[\"customer_support_interactions.csv\"]\n    \n    # Filter the dataframe for the specific customer_id\n    customer_data = support_df[support_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # If no data exists for the customer, return NaN\n    if customer_data.empty:\n        return np.nan\n    \n    # Calculate resolution times for resolved tickets\n    resolution_times = customer_data[customer_data[\"was_resolved\"] == 1].apply(\n        lambda r: r[\"resolution_time\"], axis=1\n    )\n    \n    # Return the mean resolution time, or NaN if no resolved tickets exist\n    return resolution_times.mean() if not resolution_times.empty else np.nan\n"
        },
        "0.009063794713216368": {
            "name": "total_days_active",
            "code": "import pandas as pd\n\ndef total_days_active(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key 'customer_transactions.csv' is used, as per the provided aux_data structure\n    if \"customer_transactions.csv\" not in aux_data:\n        raise KeyError(\"The key 'customer_transactions.csv' is missing from aux_data.\")\n    \n    transactions_df = aux_data[\"customer_transactions.csv\"]\n    \n    # Ensure the required columns exist in the transactions dataframe\n    required_columns = {\"customer_id\", \"transaction_date\"}\n    if not required_columns.issubset(transactions_df.columns):\n        raise KeyError(f\"The dataframe 'customer_transactions.csv' is missing required columns: {required_columns - set(transactions_df.columns)}\")\n    \n    # Filter transactions for the given customer_id\n    customer_data = transactions_df[transactions_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # Convert transaction_date to datetime\n    dates = pd.to_datetime(customer_data[\"transaction_date\"], errors='coerce')\n    \n    # Handle cases where there are no valid dates\n    if dates.isna().all():\n        return 0\n    \n    # Calculate the total active days\n    return (dates.max() - dates.min()).days\n"
        },
        "0": {
            "name": "high_value_transactions_count",
            "code": "\n\ndef high_value_transactions_count(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> int:\n    # Ensure the key exists in the aux_dataframes dictionary\n    if \"customer_transactions.csv\" not in aux_dataframes:\n        raise KeyError(\"The key 'customer_transactions.csv' is missing from aux_dataframes.\")\n    \n    # Access the customer_transactions dataframe\n    transactions_df = aux_dataframes[\"customer_transactions.csv\"]\n    \n    # Validate that the required columns exist in the dataframe\n    required_columns = {\"customer_id\", \"transaction_amount\"}\n    if not required_columns.issubset(transactions_df.columns):\n        raise ValueError(f\"The dataframe 'customer_transactions.csv' is missing one or more required columns: {required_columns}\")\n    \n    # Define the high-value transaction threshold\n    high_value_threshold = 1000  # Example threshold\n    \n    # Filter transactions for the given customer_id\n    customer_data = transactions_df[transactions_df[\"customer_id\"] == row[\"customer_id\"]]\n    \n    # Count transactions with an amount greater than the threshold\n    high_value_count = customer_data[customer_data[\"transaction_amount\"] > high_value_threshold].shape[0]\n    \n    return high_value_count\n"
        }
    },
    "feature_descriptions": [
        "days since last support",
        "support resolved ratio",
        "num support tickets",
        "click through rate",
        "cross engaged in marketing and support",
        "support escalation rate",
        "total transactions count",
        "total transaction amount",
        "transaction frequency",
        "days since last transaction",
        "median transaction amount",
        "max transaction amount",
        "total campaigns sent",
        "days since first campaign",
        "avg transaction amount",
        "avg ticket resolution time",
        "total days active",
        "high value transactions count"
    ]
}