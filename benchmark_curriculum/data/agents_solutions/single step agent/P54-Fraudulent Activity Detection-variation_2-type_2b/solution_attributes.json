{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "unique_merchants_count",
        "max_transaction_amount",
        "weekend_transactions_count",
        "mean_transaction_amount",
        "std_transaction_amount",
        "customer_age",
        "median_transaction_amount",
        "support_calls_last_month"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.07066695513549576": {
            "name": "unique_merchants_count",
            "code": "\n\ndef unique_merchants_count(row, aux_data: Dict[str, pd.DataFrame]):\n    # Check if 'customer_transactions_table' exists in aux_data\n    if 'customer_transactions_table.csv' not in aux_data:\n        raise KeyError(\"'customer_transactions_table.csv' is missing from aux_data\")\n    \n    # Access the customer_transactions_table from aux_data\n    customer_transactions = aux_data['customer_transactions_table.csv']\n    \n    # Ensure the required columns exist in the DataFrame\n    required_columns = {'customer_id', 'merchant'}\n    if not required_columns.issubset(customer_transactions.columns):\n        raise ValueError(f\"The DataFrame is missing one or more required columns: {required_columns}\")\n    \n    # Filter transactions for the given customer_id\n    customer_transactions = customer_transactions[customer_transactions['customer_id'] == row['customer_id']]\n    \n    # Return the count of unique merchants\n    return customer_transactions['merchant'].nunique()\n"
        },
        "0.05065673215942932": {
            "name": "max_transaction_amount",
            "code": "\n\ndef max_transaction_amount(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Check if 'customer_transactions_table' exists in aux_dataframes\n    if 'customer_transactions_table.csv' not in aux_dataframes:\n        raise KeyError(\"'customer_transactions_table.csv' is missing from aux_dataframes\")\n    \n    # Get the customer transactions table\n    customer_transactions_table = aux_dataframes['customer_transactions_table.csv']\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {'customer_id', 'transaction_amount'}\n    if not required_columns.issubset(customer_transactions_table.columns):\n        raise ValueError(f\"The dataframe 'customer_transactions_table.csv' is missing required columns: {required_columns - set(customer_transactions_table.columns)}\")\n    \n    # Filter transactions for the given customer_id\n    customer_transactions = customer_transactions_table[customer_transactions_table['customer_id'] == row['customer_id']]\n    \n    # Return the maximum transaction amount, or None if no transactions exist\n    if not customer_transactions.empty:\n        return customer_transactions['transaction_amount'].max()\n    else:\n        return None\n"
        },
        "0.010285346347518058": {
            "name": "weekend_transactions_count",
            "code": "import pandas as pd\n\ndef weekend_transactions_count(row, aux_data: Dict[str, pd.DataFrame]):\n    # Check if 'customer_transactions_table.csv' exists in aux_data\n    if 'customer_transactions_table.csv' not in aux_data:\n        raise KeyError(\"The key 'customer_transactions_table.csv' is missing from aux_data.\")\n    \n    # Extract the customer_transactions_table\n    customer_transactions_table = aux_data['customer_transactions_table.csv']\n    \n    # Ensure the required columns exist in the customer_transactions_table\n    required_columns = {'customer_id', 'transaction_date'}\n    if not required_columns.issubset(customer_transactions_table.columns):\n        raise ValueError(f\"The dataframe 'customer_transactions_table.csv' must contain the columns: {required_columns}\")\n    \n    # Filter transactions for the given customer_id\n    if 'customer_id' not in row:\n        raise KeyError(\"The row must contain the key 'customer_id'.\")\n    \n    customer_transactions = customer_transactions_table[\n        customer_transactions_table['customer_id'] == row['customer_id']\n    ]\n    \n    # Convert 'transaction_date' to datetime and filter for weekends (Saturday=5, Sunday=6)\n    customer_transactions['transaction_date'] = pd.to_datetime(customer_transactions['transaction_date'], errors='coerce')\n    weekend_transactions = customer_transactions[customer_transactions['transaction_date'].dt.weekday >= 5]\n    \n    # Return the count of weekend transactions\n    return weekend_transactions.shape[0]\n"
        },
        "0.007483609136878221": {
            "name": "mean_transaction_amount",
            "code": "\n\ndef mean_transaction_amount(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> float:\n    # Check if 'customer_transactions_table.csv' exists in aux_dataframes\n    if 'customer_transactions_table.csv' not in aux_dataframes:\n        raise KeyError(\"'customer_transactions_table.csv' is missing from aux_dataframes\")\n    \n    # Get the customer transactions table\n    customer_transactions_table = aux_dataframes['customer_transactions_table.csv']\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {'customer_id', 'transaction_amount'}\n    if not required_columns.issubset(customer_transactions_table.columns):\n        raise KeyError(f\"The required columns {required_columns} are missing from 'customer_transactions_table.csv'\")\n    \n    # Filter transactions for the given customer_id\n    customer_transactions = customer_transactions_table[customer_transactions_table['customer_id'] == row['customer_id']]\n    \n    # Return the mean of the transaction amounts, handling the case where there are no transactions\n    if customer_transactions.empty:\n        return 0.0  # Return 0.0 if no transactions are found\n    return customer_transactions['transaction_amount'].mean()\n"
        },
        "0.006826120035294713": {
            "name": "std_transaction_amount",
            "code": "\n\ndef std_transaction_amount(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> float:\n    # Check if 'customer_transactions_table.csv' exists in aux_dataframes\n    if 'customer_transactions_table.csv' not in aux_dataframes:\n        raise KeyError(\"'customer_transactions_table.csv' is missing from aux_dataframes\")\n    \n    # Get the customer transactions table\n    customer_transactions_table = aux_dataframes['customer_transactions_table.csv']\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {'customer_id', 'transaction_amount'}\n    if not required_columns.issubset(customer_transactions_table.columns):\n        raise KeyError(f\"The dataframe 'customer_transactions_table.csv' is missing required columns: {required_columns - set(customer_transactions_table.columns)}\")\n    \n    # Filter transactions for the given customer_id\n    customer_transactions = customer_transactions_table[customer_transactions_table['customer_id'] == row['customer_id']]\n    \n    # If no transactions exist for the customer, return NaN\n    if customer_transactions.empty:\n        return float('nan')\n    \n    # Calculate and return the standard deviation of transaction amounts\n    return customer_transactions['transaction_amount'].std()\n"
        },
        "0.0006196510429406226": {
            "name": "customer_age",
            "code": "import pandas as pd\nimport datetime\n\ndef customer_age(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key 'customer_profiles_table.csv' exists in aux_data\n    if 'customer_profiles_table.csv' not in aux_data:\n        raise KeyError(\"The key 'customer_profiles_table.csv' is missing from aux_data.\")\n    \n    # Get the customer_profiles_table dataframe\n    customer_profiles_table = aux_data['customer_profiles_table.csv']\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {'customer_id', 'date_of_birth'}\n    if not required_columns.issubset(customer_profiles_table.columns):\n        raise ValueError(f\"The dataframe 'customer_profiles_table.csv' must contain the columns: {required_columns}\")\n    \n    # Set the index to 'customer_id' for efficient lookup\n    customer_profiles_table = customer_profiles_table.set_index('customer_id')\n    \n    # Check if the customer_id exists in the dataframe\n    customer_id = row['customer_id']\n    if customer_id not in customer_profiles_table.index:\n        raise KeyError(f\"Customer ID {customer_id} not found in 'customer_profiles_table.csv'.\")\n    \n    # Get the date_of_birth for the customer\n    date_of_birth = customer_profiles_table.loc[customer_id, 'date_of_birth']\n    \n    # Ensure date_of_birth is not null\n    if pd.isnull(date_of_birth):\n        raise ValueError(f\"Date of birth is missing for customer ID {customer_id}.\")\n    \n    # Convert date_of_birth to datetime and calculate age\n    date_of_birth = pd.to_datetime(date_of_birth)\n    current_date = datetime.strptime(row['start_time'], '%Y-%m-%d %H:%M:%S.%f')  # Use start_time as the reference date\n    age = (current_date - date_of_birth).days // 365\n    \n    return age\n"
        },
        "0.0004078210085472888": {
            "name": "median_transaction_amount",
            "code": "\n\ndef median_transaction_amount(row, aux_data: Dict[str, pd.DataFrame]):\n    # Check if 'customer_transactions_table.csv' exists in aux_data\n    if 'customer_transactions_table.csv' not in aux_data:\n        raise KeyError(\"'customer_transactions_table.csv' is missing from aux_data\")\n    \n    # Get the customer transactions table\n    customer_transactions_table = aux_data['customer_transactions_table.csv']\n    \n    # Filter transactions for the given customer_id\n    customer_transactions = customer_transactions_table[\n        customer_transactions_table['customer_id'] == row['customer_id']\n    ]\n    \n    # Check if there are any transactions for the customer\n    if customer_transactions.empty:\n        return None  # Return None if no transactions are found\n    \n    # Calculate and return the median transaction amount\n    return customer_transactions['transaction_amount'].median()\n"
        },
        "0": {
            "name": "support_calls_last_month",
            "code": "import pandas as pd\nimport datetime\n\ndef support_calls_last_month(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the key 'support_interactions_table' exists in aux_data\n    if 'support_interactions_table.csv' not in aux_data:\n        raise KeyError(\"The key 'support_interactions_table.csv' is missing from aux_data.\")\n    \n    # Access the support_interactions_table from aux_data\n    support_interactions = aux_data['support_interactions_table.csv']\n    \n    # Ensure the required columns exist in the support_interactions_table\n    required_columns = {'customer_id', 'interaction_date'}\n    if not required_columns.issubset(support_interactions.columns):\n        raise ValueError(f\"The support_interactions_table is missing one or more required columns: {required_columns}\")\n    \n    # Calculate the date one month ago\n    one_month_ago = datetime.datetime.now() - pd.Timedelta(days=30)\n    \n    # Filter the interactions for the given customer_id\n    customer_interactions = support_interactions[support_interactions['customer_id'] == row['customer_id']]\n    \n    # Ensure the 'interaction_date' column is in datetime format\n    if not pd.api.types.is_datetime64_any_dtype(customer_interactions['interaction_date']):\n        customer_interactions['interaction_date'] = pd.to_datetime(customer_interactions['interaction_date'])\n    \n    # Filter interactions that occurred within the last month\n    recent_interactions = customer_interactions[\n        customer_interactions['interaction_date'] > one_month_ago\n    ]\n    \n    # Return the count of recent interactions\n    return recent_interactions.shape[0]\n"
        }
    },
    "feature_descriptions": [
        "unique merchants count",
        "max transaction amount",
        "weekend transactions count",
        "mean transaction amount",
        "std transaction amount",
        "customer age",
        "median transaction amount",
        "support calls last month"
    ]
}