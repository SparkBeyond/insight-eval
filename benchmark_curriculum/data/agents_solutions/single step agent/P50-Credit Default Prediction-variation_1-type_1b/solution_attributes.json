{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "loan_to_income_ratio",
        "interest_rate_std",
        "approval_rate",
        "customer_age"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.25043318909324025": {
            "name": "loan_to_income_ratio",
            "code": "import pandas as pd\n\ndef loan_to_income_ratio(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Extract customer_id and loan_application_id from the row\n    customer_id = row['customer_id']\n    loan_application_id = row['loan_application_id']\n    \n    # Check if 'customer_demographics_table.csv' exists in aux_dataframes\n    if 'customer_demographics_table.csv' not in aux_dataframes:\n        raise ValueError(\"Missing 'customer_demographics_table.csv' in aux_dataframes\")\n    \n    # Get the customer demographics table\n    demographics_data = aux_dataframes['customer_demographics_table.csv']\n    \n    # Ensure the required column 'annual_income' exists in the demographics table\n    if 'annual_income' not in demographics_data.columns:\n        raise ValueError(\"'annual_income' column is missing in 'customer_demographics_table.csv'\")\n    \n    # Get the annual income for the customer\n    customer_data = demographics_data[demographics_data['customer_id'] == customer_id]\n    if customer_data.empty:\n        return 0  # No customer data found\n    annual_income = customer_data['annual_income'].iloc[0]\n    \n    # Check if 'payment_history_table.csv' exists in aux_dataframes\n    if 'payment_history_table.csv' not in aux_dataframes:\n        raise ValueError(\"Missing 'payment_history_table.csv' in aux_dataframes\")\n    \n    # Get the payment history table\n    payment_history_data = aux_dataframes['payment_history_table.csv']\n    \n    # Ensure the required column 'loan_application_id' exists in the payment history table\n    if 'loan_application_id' not in payment_history_data.columns:\n        raise ValueError(\"'loan_application_id' column is missing in 'payment_history_table.csv'\")\n    \n    # Join the payment history table with the main dataframe to get loan amounts\n    merged_data = pd.merge(\n        df_train[['loan_application_id', 'loan_amount']],\n        payment_history_data,\n        on='loan_application_id',\n        how='inner'\n    )\n    \n    # Filter loans for the specific customer\n    customer_loans = merged_data[merged_data['loan_application_id'] == loan_application_id]\n    \n    # If no loans exist for the customer, return 0\n    if customer_loans.empty:\n        return 0\n    \n    # Calculate the average loan amount\n    avg_loan_amount = customer_loans['loan_amount'].mean()\n    \n    # Calculate the loan-to-income ratio\n    ratio = avg_loan_amount / annual_income if annual_income > 0 else 0\n    return ratio\n"
        },
        "0.018564691142937347": {
            "name": "interest_rate_std",
            "code": "\n\ndef interest_rate_std(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the correct key is used to access the payment history dataframe\n    if 'payment_history_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'payment_history_table.csv' is missing in aux_dataframes.\")\n    \n    loan_data = aux_dataframes['payment_history_table.csv']\n    \n    # Check if the required columns exist in the dataframe\n    required_columns = {'payment_id', 'loan_application_id'}\n    if not required_columns.issubset(loan_data.columns):\n        raise KeyError(f\"The dataframe 'payment_history_table.csv' is missing required columns: {required_columns - set(loan_data.columns)}\")\n    \n    # Get the loan_application_id for the current row\n    loan_application_id = row['loan_application_id']\n    \n    # Filter loans for the given loan_application_id\n    customer_loans = loan_data[loan_data['loan_application_id'] == loan_application_id]\n    \n    # If no loans exist for the loan_application_id, return 0\n    if customer_loans.empty:\n        return 0  # No loans handled\n    \n    # Merge with the main dataframe (df_train) to get the 'interest_rate' column\n    customer_loans = customer_loans.merge(df_train[['loan_application_id', 'interest_rate']], \n                                          on='loan_application_id', \n                                          how='left')\n    \n    # If the merge results in no interest rate data, return 0\n    if customer_loans['interest_rate'].isnull().all():\n        return 0  # No interest rate data available\n    \n    # Calculate and return the standard deviation of interest rates\n    return customer_loans['interest_rate'].std()\n"
        },
        "0.013214443579845456": {
            "name": "approval_rate",
            "code": "\n\ndef approval_rate(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Extract the customer_id from the row\n    customer_id = row['customer_id']\n    \n    # Access the payment history dataframe using the correct key\n    if 'payment_history_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'payment_history_table.csv' is missing in aux_dataframes.\")\n    \n    payment_history = aux_dataframes['payment_history_table.csv']\n    \n    # Check if the necessary columns are present in the payment history dataframe\n    if 'loan_application_id' not in payment_history.columns:\n        raise KeyError(\"The payment history dataframe must contain the 'loan_application_id' column.\")\n    \n    # Check if the necessary columns are present in the main dataframe\n    if 'loan_application_id' not in df_train.columns or 'approval_status' not in df_train.columns:\n        raise KeyError(\"The main dataframe must contain 'loan_application_id' and 'approval_status' columns.\")\n    \n    # Merge the payment history dataframe with the main dataframe to get approval_status\n    merged_data = payment_history.merge(\n        df_train[['loan_application_id', 'customer_id', 'approval_status']],\n        on='loan_application_id',\n        how='left'\n    )\n    \n    # Filter the loans for the given customer_id\n    customer_loans = merged_data[merged_data['customer_id'] == customer_id]\n    \n    # If no loans are found for the customer, return 0\n    if customer_loans.empty:\n        return 0  # No loans handled\n    \n    # Calculate the approval rate\n    approvals = customer_loans[customer_loans['approval_status'] == 'Approved'].shape[0]\n    total_loans = customer_loans.shape[0]\n    return approvals / total_loans if total_loans > 0 else 0\n"
        },
        "0.005267859451396853": {
            "name": "customer_age",
            "code": "import datetime\n\ndef customer_age(row, aux_data: Dict[str, pd.DataFrame]):\n    # Get the customer_id from the row\n    customer_id = row['customer_id']\n    \n    # Access the customer_demographics_table.csv dataframe from aux_data\n    demographics_df = aux_data['customer_demographics_table.csv']\n    \n    # Find the date_of_birth for the given customer_id\n    customer_data = demographics_df[demographics_df['customer_id'] == customer_id]\n    \n    # If the customer_id is not found, return None\n    if customer_data.empty:\n        return None\n    \n    # Extract the date_of_birth\n    date_of_birth_str = customer_data.iloc[0]['date_of_birth']\n    \n    # Convert the date_of_birth to a datetime object\n    date_of_birth = datetime.datetime.strptime(date_of_birth_str, \"%Y-%m-%d\")\n    \n    # Get the current date\n    current_date = datetime.datetime.now()\n    \n    # Calculate the age\n    age = (current_date - date_of_birth).days // 365\n    \n    return age\n"
        }
    },
    "feature_descriptions": [
        "loan to income ratio",
        "interest rate std",
        "approval rate",
        "customer age"
    ]
}