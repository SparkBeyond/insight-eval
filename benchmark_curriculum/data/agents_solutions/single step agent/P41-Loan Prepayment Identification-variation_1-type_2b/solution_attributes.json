{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "total_collateral_value",
        "total_loan_amount",
        "closed_loans",
        "active_loans",
        "loan_to_income_ratio",
        "has_multiple_loans",
        "age",
        "income_per_dependent",
        "max_payment_amount",
        "is_high_risk",
        "avg_payment_amount_to_income_ratio",
        "total_repayments",
        "loan_to_collateral_ratio",
        "payment_failure_rate",
        "average_loan_term",
        "payment_compliance",
        "repayment_consistency"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.47160530926589844": {
            "name": "total_collateral_value",
            "code": "import pandas as pd\n\ndef total_collateral_value(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Check if 'loan_table.csv' exists in aux_dataframes\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"'loan_table.csv' is missing from aux_dataframes\")\n    \n    # Get the loan_table DataFrame\n    loans = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the loan_table DataFrame\n    required_columns = {'customer_id', 'collateral_value'}\n    if not required_columns.issubset(loans.columns):\n        raise KeyError(f\"The loan_table is missing one or more required columns: {required_columns}\")\n    \n    # Ensure the 'loan_id' column exists in the row\n    if 'loan_id' not in row:\n        raise KeyError(\"'loan_id' is missing from the input row\")\n    \n    # Ensure 'loan_id' exists in the loan_table DataFrame\n    if 'loan_id' not in loans.columns:\n        raise KeyError(\"'loan_id' is missing from the loan_table DataFrame\")\n    \n    # Get the loan_id from the input row\n    loan_id = row['loan_id']\n    \n    # Find the customer_id associated with the loan_id\n    loan_row = loans[loans['loan_id'] == loan_id]\n    if loan_row.empty:\n        raise ValueError(f\"No loan found with loan_id: {loan_id}\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Filter loans for the given customer_id\n    customer_loans = loans[loans['customer_id'] == customer_id]\n    \n    # Ensure 'collateral_value' is numeric\n    if not pd.api.types.is_numeric_dtype(loans['collateral_value']):\n        raise TypeError(\"'collateral_value' column must be numeric\")\n    \n    # Return the sum of collateral_value for the customer's loans\n    return customer_loans['collateral_value'].sum()\n"
        },
        "0.4639043435464149": {
            "name": "total_loan_amount",
            "code": "import pandas as pd\n\ndef total_loan_amount(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    import pandas as pd\n\n    # Ensure the key 'loan_table.csv' exists in aux_dataframes\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"'loan_table.csv' is missing from aux_dataframes\")\n    \n    # Get the loan_table DataFrame\n    loans = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the loan_table DataFrame\n    required_columns = {'customer_id', 'loan_id', 'loan_amount'}\n    if not required_columns.issubset(loans.columns):\n        raise ValueError(f\"The loan_table DataFrame must contain the columns: {required_columns}\")\n    \n    # Ensure the row contains a 'loan_id' column\n    if 'loan_id' not in row:\n        raise KeyError(\"'loan_id' is missing from the input row\")\n    \n    # Get the loan_id from the row\n    loan_id = row['loan_id']\n    \n    # Find the customer_id corresponding to the loan_id\n    loan_row = loans[loans['loan_id'] == loan_id]\n    if loan_row.empty:\n        raise ValueError(f\"No loan found for loan_id: {loan_id}\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Filter loans for the given customer_id\n    customer_loans = loans[loans['customer_id'] == customer_id]\n    \n    # Return the sum of the loan amounts\n    return customer_loans['loan_amount'].sum()\n"
        },
        "0.2945578339982534": {
            "name": "closed_loans",
            "code": "\n\ndef closed_loans(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'loan_table.csv' exists in aux_dataframes\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'loan_table.csv' is missing from aux_dataframes.\")\n    \n    # Access the loan_table dataframe\n    loans = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the loan_table dataframe\n    required_columns = {'loan_id', 'customer_id', 'loan_status'}\n    if not required_columns.issubset(loans.columns):\n        raise ValueError(f\"The loan_table.csv dataframe is missing one or more required columns: {required_columns}\")\n    \n    # Get the loan_id from the current row\n    loan_id = row.get('loan_id')\n    if loan_id is None:\n        raise KeyError(\"The input row is missing the 'loan_id' column.\")\n    \n    # Find the customer_id associated with the loan_id\n    loan_row = loans[loans['loan_id'] == loan_id]\n    if loan_row.empty:\n        raise ValueError(f\"No loan found in loan_table.csv for loan_id: {loan_id}\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Filter loans for the given customer_id\n    customer_loans = loans[loans['customer_id'] == customer_id]\n    \n    # Count the number of loans with 'Closed' status\n    return (customer_loans['loan_status'] == 'Closed').sum()\n"
        },
        "0.29312132195945356": {
            "name": "active_loans",
            "code": "\n\ndef active_loans(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'loan_table.csv' is used, as per the provided aux_data structure\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'loan_table.csv' is missing from aux_dataframes.\")\n    \n    # Access the loan_table dataframe\n    loans = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the loan_table dataframe\n    required_columns = {'customer_id', 'loan_status', 'loan_id'}\n    if not required_columns.issubset(loans.columns):\n        raise ValueError(f\"The loan_table.csv dataframe is missing one or more required columns: {required_columns}\")\n    \n    # Extract the loan_id from the row\n    loan_id = row.get('loan_id')\n    if loan_id is None:\n        raise KeyError(\"The row does not contain a 'loan_id' column.\")\n    \n    # Find the customer_id corresponding to the loan_id\n    loan_row = loans[loans['loan_id'] == loan_id]\n    if loan_row.empty:\n        raise ValueError(f\"No loan found in loan_table.csv for loan_id: {loan_id}\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Filter loans for the given customer_id\n    customer_loans = loans[loans['customer_id'] == customer_id]\n    \n    # Count the number of active loans\n    active_loans_count = (customer_loans['loan_status'] == 'Active').sum()\n    \n    return active_loans_count\n"
        },
        "0.2651863965295878": {
            "name": "loan_to_income_ratio",
            "code": "import pandas as pd\n\ndef loan_to_income_ratio(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Calculate the loan-to-income ratio for a given row.\n\n    Args:\n        row (pd.Series): A row of a dataframe containing at least a 'loan_id'.\n        aux_dataframes (Dict[str, pd.DataFrame]): A dictionary of auxiliary dataframes, including 'loan_table.csv' and 'customer_table.csv'.\n\n    Returns:\n        float: The loan-to-income ratio, or 0 if 'annual_income' is 0 or missing.\n    \"\"\"\n    # Ensure required auxiliary dataframes exist\n    if 'loan_table.csv' not in aux_dataframes or 'customer_table.csv' not in aux_dataframes:\n        raise KeyError(\"'loan_table.csv' or 'customer_table.csv' is missing from aux_dataframes\")\n    \n    # Access the loan_table and customer_table dataframes\n    loans = aux_dataframes['loan_table.csv']\n    customers = aux_dataframes['customer_table.csv']\n    \n    # Ensure the required columns exist in the loan_table dataframe\n    loan_required_columns = {'loan_id', 'customer_id', 'loan_amount'}\n    if not loan_required_columns.issubset(loans.columns):\n        raise KeyError(f\"The loan_table.csv is missing one or more required columns: {loan_required_columns}\")\n    \n    # Ensure the required columns exist in the customer_table dataframe\n    customer_required_columns = {'customer_id', 'annual_income'}\n    if not customer_required_columns.issubset(customers.columns):\n        raise KeyError(f\"The customer_table.csv is missing one or more required columns: {customer_required_columns}\")\n    \n    # Ensure the row contains the 'loan_id' column\n    if 'loan_id' not in row:\n        raise KeyError(\"The input row is missing the required column: 'loan_id'\")\n    \n    # Extract the loan_id from the row\n    loan_id = row['loan_id']\n    \n    # Find the customer_id associated with the loan_id\n    loan_info = loans[loans['loan_id'] == loan_id]\n    if loan_info.empty:\n        raise ValueError(f\"No loan found for loan_id: {loan_id}\")\n    \n    customer_id = loan_info.iloc[0]['customer_id']\n    \n    # Find the annual_income for the customer_id\n    customer_info = customers[customers['customer_id'] == customer_id]\n    if customer_info.empty:\n        raise ValueError(f\"No customer found for customer_id: {customer_id}\")\n    \n    annual_income = customer_info.iloc[0]['annual_income']\n    \n    # Handle cases where annual_income is missing or zero\n    if pd.isna(annual_income) or annual_income <= 0:\n        return 0\n    \n    # Calculate the total loan amount for the customer\n    total_loan = loans[loans['customer_id'] == customer_id]['loan_amount'].sum()\n    \n    # Calculate and return the loan-to-income ratio\n    return total_loan / annual_income\n"
        },
        "0.2638287066701476": {
            "name": "has_multiple_loans",
            "code": "\n\ndef has_multiple_loans(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'loan_table.csv' exists in aux_dataframes\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"'loan_table.csv' is missing from aux_dataframes\")\n    \n    # Get the loan_table dataframe\n    loans = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the loan_table dataframe\n    required_columns = {'customer_id', 'loan_id'}\n    if not required_columns.issubset(loans.columns):\n        raise ValueError(f\"loan_table.csv is missing required columns: {required_columns - set(loans.columns)}\")\n    \n    # Ensure the input row contains the 'loan_id' column\n    loan_id = row.get('loan_id')\n    if loan_id is None:\n        raise ValueError(\"The input row is missing the 'loan_id' column\")\n    \n    # Find the customer_id associated with the given loan_id\n    loan_row = loans[loans['loan_id'] == loan_id]\n    if loan_row.empty:\n        raise ValueError(f\"No loan found in loan_table.csv for loan_id: {loan_id}\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Check the number of loans for the given customer_id\n    num_loans = len(loans[loans['customer_id'] == customer_id])\n    return 1 if num_loans > 1 else 0\n"
        },
        "0.05219883307880017": {
            "name": "age",
            "code": "import datetime\n\ndef age(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the loan_id from the row\n    loan_id = row['loan_id']\n    \n    # Get the loan_table dataframe from aux_data\n    loan_table = aux_data['loan_table.csv']\n    \n    # Find the customer_id associated with the loan_id\n    loan_row = loan_table[loan_table['loan_id'] == loan_id]\n    if loan_row.empty:\n        raise ValueError(f\"Loan ID {loan_id} not found in loan_table.csv\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Get the customer_table dataframe from aux_data\n    customer_table = aux_data['customer_table.csv']\n    \n    # Find the date_of_birth for the customer_id\n    customer_row = customer_table[customer_table['customer_id'] == customer_id]\n    if customer_row.empty:\n        raise ValueError(f\"Customer ID {customer_id} not found in customer_table.csv\")\n    \n    date_of_birth = customer_row.iloc[0]['date_of_birth']\n    \n    # Convert date_of_birth to a datetime object\n    dob = datetime.datetime.strptime(date_of_birth, '%Y-%m-%d')\n    \n    # Calculate the age\n    today = datetime.datetime.today()\n    return today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))\n"
        },
        "0.02964182699123902": {
            "name": "income_per_dependent",
            "code": "\n\ndef income_per_dependent(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the necessary dataframes from aux_data\n    customer_table = aux_data['customer_table.csv']\n    loan_table = aux_data['loan_table.csv']\n    \n    # Find the loan_id from the row\n    loan_id = row['loan_id']\n    \n    # Look up the loan's data in the loan_table to find the customer_id\n    loan_data = loan_table[loan_table['loan_id'] == loan_id]\n    \n    # Ensure we found the loan and there is exactly one match\n    if loan_data.empty or len(loan_data) > 1:\n        raise ValueError(f\"Loan ID {loan_id} not found or not unique in loan_table.\")\n    \n    # Extract the customer_id from the loan_data\n    customer_id = loan_data.iloc[0]['customer_id']\n    \n    # Look up the customer's data in the customer_table\n    customer_data = customer_table[customer_table['customer_id'] == customer_id]\n    \n    # Ensure we found the customer and there is exactly one match\n    if customer_data.empty or len(customer_data) > 1:\n        raise ValueError(f\"Customer ID {customer_id} not found or not unique in customer_table.\")\n    \n    # Extract the annual_income and number_of_dependents\n    annual_income = customer_data.iloc[0]['annual_income']\n    number_of_dependents = customer_data.iloc[0]['number_of_dependents']\n    \n    # Calculate income per dependent\n    if number_of_dependents > 0:\n        return annual_income / number_of_dependents\n    return annual_income\n"
        },
        "0.02402882914109355": {
            "name": "max_payment_amount",
            "code": "\n\ndef max_payment_amount(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'payment_table.csv' exists in aux_dataframes\n    if 'payment_table.csv' not in aux_dataframes:\n        raise KeyError(\"'payment_table.csv' not found in aux_dataframes\")\n    \n    # Access the payment_table DataFrame\n    payments = aux_dataframes['payment_table.csv']\n    \n    # Ensure the required columns exist in the payment_table DataFrame\n    required_columns = {'loan_id', 'payment_amount'}\n    if not required_columns.issubset(payments.columns):\n        raise KeyError(f\"Missing required columns in 'payment_table.csv': {required_columns - set(payments.columns)}\")\n    \n    # Ensure the row contains the 'loan_id' column\n    if 'loan_id' not in row:\n        raise KeyError(\"'loan_id' not found in the provided row\")\n    \n    # Filter payments for the given loan_id\n    loan_payments = payments[payments['loan_id'] == row['loan_id']]\n    \n    # Return the maximum payment amount or 0 if no payments exist\n    return loan_payments['payment_amount'].max() if not loan_payments.empty else 0\n"
        },
        "0.023074942965928564": {
            "name": "is_high_risk",
            "code": "import pandas as pd\n\ndef is_high_risk(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    import pandas as pd\n\n    # Ensure the key 'loan_table.csv' is used correctly\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'loan_table.csv' is missing from aux_dataframes.\")\n    \n    # Access the loan table\n    loans = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the loan table\n    required_columns = {'customer_id', 'loan_amount', 'collateral_value'}\n    if not required_columns.issubset(loans.columns):\n        raise ValueError(f\"The loan table is missing one or more required columns: {required_columns}\")\n    \n    # Check if the row contains a 'customer_id' column\n    if 'customer_id' not in row:\n        # If not, try to infer the 'customer_id' using the 'loan_id' from the row\n        if 'loan_id' not in row:\n            raise KeyError(\"The row does not contain 'customer_id' or 'loan_id'.\")\n        \n        # Map the loan_id to customer_id using the loan table\n        loan_id = row['loan_id']\n        if loan_id not in loans['loan_id'].values:\n            raise ValueError(f\"Loan ID {loan_id} not found in the loan table.\")\n        \n        # Retrieve the customer_id for the given loan_id\n        customer_id = loans.loc[loans['loan_id'] == loan_id, 'customer_id'].iloc[0]\n    else:\n        # If 'customer_id' is present in the row, use it directly\n        customer_id = row['customer_id']\n    \n    # Filter loans for the specific customer\n    customer_loans = loans[loans['customer_id'] == customer_id]\n    \n    # Calculate total loan amount and total collateral value\n    total_loan = customer_loans['loan_amount'].sum()\n    total_collateral = customer_loans['collateral_value'].sum()\n    \n    # Determine if the customer is high risk\n    if total_collateral > 0 and (total_loan / total_collateral) > 1:\n        return 1\n    else:\n        return 0\n"
        },
        "0.016460060967937767": {
            "name": "avg_payment_amount_to_income_ratio",
            "code": "\n\ndef avg_payment_amount_to_income_ratio(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the required keys exist in aux_dataframes\n    required_files = {'payment_table.csv', 'loan_table.csv', 'customer_table.csv'}\n    missing_files = required_files - aux_dataframes.keys()\n    if missing_files:\n        raise KeyError(f\"Missing required files in aux_dataframes: {missing_files}\")\n    \n    # Get the payment, loan, and customer tables\n    payments = aux_dataframes['payment_table.csv']\n    loans = aux_dataframes['loan_table.csv']\n    customers = aux_dataframes['customer_table.csv']\n    \n    # Ensure the required columns exist in the payment table\n    required_payment_columns = {'loan_id', 'payment_amount'}\n    if not required_payment_columns.issubset(payments.columns):\n        raise KeyError(f\"Missing required columns in payment_table.csv: {required_payment_columns - set(payments.columns)}\")\n    \n    # Ensure the required columns exist in the loan table\n    required_loan_columns = {'loan_id', 'customer_id'}\n    if not required_loan_columns.issubset(loans.columns):\n        raise KeyError(f\"Missing required columns in loan_table.csv: {required_loan_columns - set(loans.columns)}\")\n    \n    # Ensure the required columns exist in the customer table\n    required_customer_columns = {'customer_id', 'annual_income'}\n    if not required_customer_columns.issubset(customers.columns):\n        raise KeyError(f\"Missing required columns in customer_table.csv: {required_customer_columns - set(customers.columns)}\")\n    \n    # Retrieve the customer_id for the given loan_id in the row\n    loan_id = row['loan_id']\n    loan_row = loans[loans['loan_id'] == loan_id]\n    if loan_row.empty:\n        raise ValueError(f\"Loan ID {loan_id} not found in loan_table.csv\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Retrieve the customer's annual income\n    customer_row = customers[customers['customer_id'] == customer_id]\n    if customer_row.empty:\n        raise ValueError(f\"Customer ID {customer_id} not found in customer_table.csv\")\n    \n    annual_income = customer_row.iloc[0]['annual_income']\n    \n    # Filter payments for the specific customer\n    customer_payments = payments[payments['loan_id'].isin(loans[loans['customer_id'] == customer_id]['loan_id'])]\n    \n    # Calculate the average payment amount\n    avg_payment = customer_payments['payment_amount'].mean()\n    \n    # Return the ratio of average payment to annual income, handling division by zero\n    return avg_payment / annual_income if annual_income > 0 else 0\n"
        },
        "0.011182235266926771": {
            "name": "total_repayments",
            "code": "\n\ndef total_repayments(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'payment_table.csv' exists in aux_dataframes\n    if 'payment_table.csv' not in aux_dataframes:\n        raise KeyError(\"'payment_table.csv' not found in aux_dataframes\")\n    \n    # Access the payment_table dataframe\n    repayments = aux_dataframes['payment_table.csv']\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {'loan_id', 'payment_amount'}\n    if not required_columns.issubset(repayments.columns):\n        raise KeyError(f\"Missing required columns in 'payment_table.csv': {required_columns - set(repayments.columns)}\")\n    \n    # Filter payments for the given loan_id\n    loan_payments = repayments[repayments['loan_id'] == row['loan_id']]\n    \n    # Return the sum of payment amounts\n    return loan_payments['payment_amount'].sum()\n"
        },
        "0.009164940810906335": {
            "name": "loan_to_collateral_ratio",
            "code": "\n\ndef loan_to_collateral_ratio(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'loan_table.csv' exists in aux_dataframes\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"'loan_table.csv' not found in aux_dataframes\")\n\n    # Access the loan_table dataframe\n    loans = aux_dataframes['loan_table.csv']\n\n    # Ensure the required columns exist in the loan_table dataframe\n    required_columns = {'customer_id', 'loan_id', 'loan_amount', 'collateral_value'}\n    if not required_columns.issubset(loans.columns):\n        raise KeyError(f\"Missing required columns in loan_table.csv: {required_columns - set(loans.columns)}\")\n\n    # Get the loan_id from the row\n    loan_id = row.get('loan_id')\n    if loan_id is None:\n        raise KeyError(\"'loan_id' not found in the input row\")\n\n    # Find the customer_id associated with the loan_id\n    loan_row = loans[loans['loan_id'] == loan_id]\n    if loan_row.empty:\n        raise ValueError(f\"No loan found for loan_id: {loan_id}\")\n\n    customer_id = loan_row.iloc[0]['customer_id']\n\n    # Filter loans for the given customer_id\n    loan_info = loans[loans['customer_id'] == customer_id]\n\n    # Calculate total loan amount\n    total_loan = loan_info['loan_amount'].sum()\n\n    # Calculate total collateral value, replacing NaN with 1\n    total_collateral = loan_info['collateral_value'].fillna(1).sum()\n\n    # Return the loan-to-collateral ratio, handling division by zero\n    return total_loan / total_collateral if total_collateral > 0 else 0\n"
        },
        "0.006448544384030699": {
            "name": "payment_failure_rate",
            "code": "import pandas as pd\n\ndef payment_failure_rate(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the required keys exist in aux_dataframes\n    if 'payment_table.csv' not in aux_dataframes or 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"'payment_table.csv' or 'loan_table.csv' is missing from aux_dataframes\")\n    \n    # Access the payment_table and loan_table dataframes\n    payments = aux_dataframes['payment_table.csv']\n    loans = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the payment_table and loan_table dataframes\n    required_payment_columns = {'loan_id', 'payment_status'}\n    required_loan_columns = {'loan_id', 'customer_id'}\n    if not required_payment_columns.issubset(payments.columns):\n        raise KeyError(f\"The payment_table.csv is missing one or more required columns: {required_payment_columns}\")\n    if not required_loan_columns.issubset(loans.columns):\n        raise KeyError(f\"The loan_table.csv is missing one or more required columns: {required_loan_columns}\")\n    \n    # Ensure the current row has a valid loan_id\n    if 'loan_id' not in row or pd.isna(row['loan_id']):\n        raise KeyError(\"The current row is missing the 'loan_id' field or it is NaN\")\n    \n    # Get the customer_id for the given loan_id in the current row\n    loan_id = row['loan_id']\n    loan_row = loans[loans['loan_id'] == loan_id]\n    if loan_row.empty:\n        raise KeyError(f\"No matching loan_id found in loan_table.csv for loan_id: {loan_id}\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Filter payments for the specific customer_id\n    customer_payments = payments[payments['loan_id'].isin(loans[loans['customer_id'] == customer_id]['loan_id'])]\n    \n    # Calculate the number of failed payments\n    failed = (customer_payments['payment_status'] == 'Failed').sum()\n    \n    # Calculate the total number of payments\n    total = len(customer_payments)\n    \n    # Return the failure rate, handling the case where total is 0\n    return failed / total if total > 0 else 0\n"
        },
        "0.003213151147935967": {
            "name": "average_loan_term",
            "code": "\n\ndef average_loan_term(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'loan_table.csv' exists in aux_dataframes\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"'loan_table.csv' not found in aux_dataframes\")\n    \n    # Get the loan_table dataframe\n    loans = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the loan_table dataframe\n    required_columns = {'customer_id', 'loan_term_months'}\n    if not required_columns.issubset(loans.columns):\n        raise KeyError(f\"Missing required columns in loan_table.csv: {required_columns - set(loans.columns)}\")\n    \n    # Ensure the key 'loan_id' exists in the row\n    if 'loan_id' not in row:\n        raise KeyError(\"'loan_id' not found in the row\")\n    \n    # Map the loan_id to customer_id using the loan_table\n    loan_id = row['loan_id']\n    if loan_id not in loans['loan_id'].values:\n        return None  # or return 0, depending on the desired behavior\n    \n    customer_id = loans.loc[loans['loan_id'] == loan_id, 'customer_id'].values[0]\n    \n    # Filter the loans for the given customer_id\n    loan_info = loans[loans['customer_id'] == customer_id]\n    \n    # Return the average loan term, handling the case where no loans are found\n    if loan_info.empty:\n        return None  # or return 0, depending on the desired behavior\n    return loan_info['loan_term_months'].mean()\n"
        },
        "0.0020798869055632125": {
            "name": "payment_compliance",
            "code": "\n\ndef payment_compliance(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Check if 'payment_table.csv' exists in aux_dataframes\n    if 'payment_table.csv' not in aux_dataframes:\n        raise KeyError(\"'payment_table.csv' is missing from aux_dataframes\")\n    \n    # Retrieve the payment_table DataFrame\n    payments = aux_dataframes['payment_table.csv']\n    \n    # Ensure the required columns exist in the payment_table DataFrame\n    required_columns = {'loan_id', 'payment_status'}\n    if not required_columns.issubset(payments.columns):\n        raise ValueError(f\"The payment_table is missing required columns: {required_columns - set(payments.columns)}\")\n    \n    # Filter payments for the given loan_id\n    loan_payments = payments[payments['loan_id'] == row['loan_id']]\n    \n    # Calculate the number of successful payments\n    successful = (loan_payments['payment_status'] == 'Successful').sum()\n    \n    # Calculate the total number of payments\n    total = len(loan_payments)\n    \n    # Return the compliance ratio\n    return successful / total if total > 0 else 0\n"
        },
        "0": {
            "name": "repayment_consistency",
            "code": "\n\ndef repayment_consistency(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the required dataframes are present in aux_dataframes\n    if 'payment_table.csv' not in aux_dataframes or 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"Both 'payment_table.csv' and 'loan_table.csv' must be present in aux_dataframes\")\n    \n    # Extract the relevant dataframes\n    payments = aux_dataframes['payment_table.csv']\n    loans = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the dataframes\n    required_payment_columns = {'loan_id', 'payment_status'}\n    required_loan_columns = {'loan_id', 'customer_id'}\n    if not required_payment_columns.issubset(payments.columns):\n        raise ValueError(f\"The 'payment_table.csv' dataframe must contain the columns: {required_payment_columns}\")\n    if not required_loan_columns.issubset(loans.columns):\n        raise ValueError(f\"The 'loan_table.csv' dataframe must contain the columns: {required_loan_columns}\")\n    \n    # Get the loan_id from the current row\n    loan_id = row['loan_id']\n    \n    # Find the customer_id associated with the loan_id\n    loan_row = loans[loans['loan_id'] == loan_id]\n    if loan_row.empty:\n        # If the loan_id is not found in the loan table, return 0\n        return 0\n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Filter loans for the specific customer\n    customer_loans = loans[loans['customer_id'] == customer_id]\n    \n    # If the customer has no loans, return 0\n    if customer_loans.empty:\n        return 0\n    \n    # Get the loan_ids for the customer\n    customer_loan_ids = customer_loans['loan_id']\n    \n    # Filter payments for the customer's loans\n    customer_payments = payments[payments['loan_id'].isin(customer_loan_ids)]\n    \n    # Calculate total loans and on-time repayments\n    total_loans = len(customer_payments)\n    on_time_repayments = (customer_payments['payment_status'] == 'On Time').sum()\n    \n    # Return the consistency ratio or 0 if no loans exist\n    return on_time_repayments / total_loans if total_loans > 0 else 0\n"
        }
    },
    "feature_descriptions": [
        "total collateral value",
        "total loan amount",
        "closed loans",
        "active loans",
        "loan to income ratio",
        "has multiple loans",
        "age",
        "income per dependent",
        "max payment amount",
        "is high risk",
        "avg payment amount to income ratio",
        "total repayments",
        "loan to collateral ratio",
        "payment failure rate",
        "average loan term",
        "payment compliance",
        "repayment consistency"
    ]
}