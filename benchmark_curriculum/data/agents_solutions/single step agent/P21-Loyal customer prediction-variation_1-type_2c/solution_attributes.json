{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "num_transactions",
        "total_spend_per_customer",
        "positive_marketing_response_proportion",
        "num_positive_marketing_responses",
        "recency_latest_transaction",
        "num_support_interactions",
        "resolved_issues_proportion",
        "loyalty_enrollment_to_last_login",
        "tenure_since_signup",
        "recency_last_interaction",
        "recency_latest_marketing_engagement",
        "avg_resolution_time",
        "num_marketing_engagements",
        "avg_transaction_value",
        "frequent_engagement_type",
        "top_category_purchased"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.21361399822049368": {
            "name": "num_transactions",
            "code": "\n\ndef num_transactions(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    transactions = aux_dataframes['customer_transactions.csv']\n    customer_id = row['customer_id']\n    transaction_count = transactions[transactions['customer_id'] == customer_id].shape[0]\n    return transaction_count\n"
        },
        "0.190722840758878": {
            "name": "total_spend_per_customer",
            "code": "\n\ndef total_spend_per_customer(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    transactions = aux_dataframes['customer_transactions.csv']\n    customer_id = row['customer_id']\n    total_spend = transactions[transactions['customer_id'] == customer_id]['transaction_amount'].sum()\n    return total_spend\n"
        },
        "0.16067187881963027": {
            "name": "positive_marketing_response_proportion",
            "code": "\n\ndef positive_marketing_response_proportion(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    marketing_data = aux_dataframes['marketing_engagement.csv']\n    customer_id = row['customer_id']\n    engagements = marketing_data[marketing_data['customer_id'] == customer_id]\n    if engagements.empty:\n        return 0\n    positive_rate = engagements['response'].mean()\n    return positive_rate\n"
        },
        "0.1279057039263504": {
            "name": "num_positive_marketing_responses",
            "code": "\n\ndef num_positive_marketing_responses(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    marketing_data = aux_dataframes['marketing_engagement.csv']\n    customer_id = row['customer_id']\n    positive_responses = marketing_data[(marketing_data['customer_id'] == customer_id) & (marketing_data['response'] == True)].shape[0]\n    return positive_responses\n"
        },
        "0.09526652112881004": {
            "name": "recency_latest_transaction",
            "code": "import pandas as pd\n\ndef recency_latest_transaction(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    transactions = aux_dataframes['customer_transactions.csv']\n    customer_id = row['customer_id']\n    \n    # Filter transactions for the given customer_id\n    customer_transactions = transactions[transactions['customer_id'] == customer_id]\n    \n    # If no transactions exist for the customer, return None\n    if customer_transactions.empty:\n        return None\n    \n    # Get the latest transaction date for the customer\n    latest_date = pd.to_datetime(customer_transactions['transaction_date']).max()\n    \n    # Get the last login date from the current row\n    current_date = pd.to_datetime(row['last_login_date'])\n    \n    # Calculate the difference in days between the last login date and the latest transaction date\n    return (current_date - latest_date).days\n"
        },
        "0.08860929186532952": {
            "name": "num_support_interactions",
            "code": "\n\ndef num_support_interactions(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    support_data = aux_dataframes['customer_support_interactions.csv']\n    customer_id = row['customer_id']\n    interaction_count = support_data[support_data['customer_id'] == customer_id].shape[0]\n    return interaction_count\n"
        },
        "0.06883236721738173": {
            "name": "resolved_issues_proportion",
            "code": "\n\ndef resolved_issues_proportion(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    support_data = aux_dataframes['customer_support_interactions.csv']\n    customer_id = row['customer_id']\n    issues = support_data[support_data['customer_id'] == customer_id]\n    if issues.empty:\n        return 0\n    resolution_rate = issues['was_resolved'].mean()\n    return resolution_rate\n"
        },
        "0.06880496671355384": {
            "name": "loyalty_enrollment_to_last_login",
            "code": "import pandas as pd\n\ndef loyalty_enrollment_to_last_login(row):\n    if pd.isna(row['loyalty_program_enrollment_date']):\n        return None\n    enrollment_date = pd.to_datetime(row['loyalty_program_enrollment_date'])\n    last_login_date = pd.to_datetime(row['last_login_date'])\n    return (last_login_date - enrollment_date).days\n"
        },
        "0.04965375668131017": {
            "name": "tenure_since_signup",
            "code": "import pandas as pd\n\ndef tenure_since_signup(row):\n    signup_date = pd.to_datetime(row['signup_date'])\n    last_login_date = pd.to_datetime(row['last_login_date'])  # Use the last_login_date from the current row\n    return (last_login_date - signup_date).days\n"
        },
        "0.047957901695170085": {
            "name": "recency_last_interaction",
            "code": "import pandas as pd\n\ndef recency_last_interaction(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Access the customer support interactions data\n    support_data = aux_dataframes['customer_support_interactions.csv']\n    \n    # Extract the customer_id from the current row\n    customer_id = row['customer_id']\n    \n    # Filter the support data for the given customer_id\n    customer_support_data = support_data[support_data['customer_id'] == customer_id]\n    \n    # If there are no interactions for the customer, return None\n    if customer_support_data.empty:\n        return None\n    \n    # Get the most recent interaction date for the customer\n    last_date = pd.to_datetime(customer_support_data['interaction_date']).max()\n    \n    # Get the last login date from the current row\n    current_date = pd.to_datetime(row['last_login_date'])\n    \n    # Calculate the difference in days between the last login date and the last interaction date\n    return (current_date - last_date).days\n"
        },
        "0.026810842430820225": {
            "name": "recency_latest_marketing_engagement",
            "code": "import pandas as pd\n\ndef recency_latest_marketing_engagement(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    marketing_data = aux_dataframes['marketing_engagement.csv']\n    customer_id = row['customer_id']\n    \n    # Filter marketing data for the specific customer\n    customer_marketing_data = marketing_data[marketing_data['customer_id'] == customer_id]\n    \n    # If no marketing engagement data exists for the customer, return None\n    if customer_marketing_data.empty:\n        return None\n    \n    # Get the latest engagement date for the customer\n    latest_date = pd.to_datetime(customer_marketing_data['engagement_date']).max()\n    \n    # Get the current row's last login date\n    current_date = pd.to_datetime(row['last_login_date'])\n    \n    # Calculate the difference in days between the current date and the latest engagement date\n    return (current_date - latest_date).days\n"
        },
        "0.02210952371284824": {
            "name": "avg_resolution_time",
            "code": "\n\ndef avg_resolution_time(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    support_data = aux_dataframes['customer_support_interactions.csv']\n    customer_id = row['customer_id']\n    avg_time = support_data[support_data['customer_id'] == customer_id]['resolution_time'].mean()\n    return avg_time\n"
        },
        "0.010004750362335554": {
            "name": "num_marketing_engagements",
            "code": "\n\ndef num_marketing_engagements(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    marketing_data = aux_dataframes['marketing_engagement.csv']\n    customer_id = row['customer_id']\n    engagement_count = marketing_data[marketing_data['customer_id'] == customer_id].shape[0]\n    return engagement_count\n"
        },
        "0.0024216858088683822": {
            "name": "avg_transaction_value",
            "code": "\n\ndef avg_transaction_value(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    transactions = aux_dataframes['customer_transactions.csv']\n    customer_id = row['customer_id']\n    avg_spend = transactions[transactions['customer_id'] == customer_id]['transaction_amount'].mean()\n    return avg_spend\n"
        },
        "-0.001154749176275116": {
            "name": "frequent_engagement_type",
            "code": "\n\ndef frequent_engagement_type(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    marketing_data = aux_dataframes['marketing_engagement.csv']\n    customer_id = row['customer_id']\n    if marketing_data[marketing_data['customer_id'] == customer_id].empty:\n        return None\n    frequent_type = marketing_data[marketing_data['customer_id'] == customer_id]['engagement_type'].mode().iloc[0]\n    return frequent_type\n"
        },
        "-0.0005624583974976893": {
            "name": "top_category_purchased",
            "code": "\n\ndef top_category_purchased(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    transactions = aux_dataframes['customer_transactions.csv']\n    customer_id = row['customer_id']\n    top_category = transactions[transactions['customer_id'] == customer_id]['product_category'].mode().iloc[0]\n    return top_category\n"
        }
    },
    "feature_descriptions": [
        "num transactions",
        "total spend per customer",
        "positive marketing response proportion",
        "num positive marketing responses",
        "recency latest transaction",
        "num support interactions",
        "resolved issues proportion",
        "loyalty enrollment to last login",
        "tenure since signup",
        "recency last interaction",
        "recency latest marketing engagement",
        "avg resolution time",
        "num marketing engagements",
        "avg transaction value",
        "frequent engagement type",
        "top category purchased"
    ]
}