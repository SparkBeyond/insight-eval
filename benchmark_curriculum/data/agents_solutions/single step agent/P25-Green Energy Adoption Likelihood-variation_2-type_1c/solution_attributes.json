{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "renewable_usage_percentage",
        "green_energy_cost_differential",
        "incentive_type_encoded",
        "excess_renewable_energy",
        "total_energy_usage",
        "regional_interest_score",
        "incentive_per_renewable_energy",
        "usage_intensity_score",
        "normalized_incentive",
        "income_percentile",
        "renewable_to_non_renewable_ratio",
        "demographic_diversity_index"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.06374988505725254": {
            "name": "renewable_usage_percentage",
            "code": "\n\ndef renewable_usage_percentage(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure the required dataframes are present in aux_data\n    if 'energy_usage_data_table.csv' not in aux_data:\n        raise ValueError(\"The required 'energy_usage_data_table.csv' is missing from aux_data.\")\n    if 'household_attributes_table.csv' not in aux_data:\n        raise ValueError(\"The required 'household_attributes_table.csv' is missing from aux_data.\")\n    \n    # Extract the energy usage and household attributes dataframes\n    energy_usage_df = aux_data['energy_usage_data_table.csv']\n    household_attributes_df = aux_data['household_attributes_table.csv']\n    \n    # Ensure the required columns are present in the dataframes\n    required_energy_columns = {'renewable_usage', 'non_renewable_usage', 'household_id'}\n    if not required_energy_columns.issubset(energy_usage_df.columns):\n        raise ValueError(f\"The required columns {required_energy_columns} are missing from 'energy_usage_data_table.csv'.\")\n    \n    required_household_columns = {'household_id', 'customer_id'}\n    if not required_household_columns.issubset(household_attributes_df.columns):\n        raise ValueError(f\"The required columns {required_household_columns} are missing from 'household_attributes_table.csv'.\")\n    \n    # Get the customer_id from the row\n    customer_id = row.get('customer_id')\n    if customer_id is None:\n        raise ValueError(\"The row is missing the 'customer_id' column.\")\n    \n    # Map the customer_id to the corresponding household_id\n    household_row = household_attributes_df[household_attributes_df['customer_id'] == customer_id]\n    if household_row.empty:\n        return 0  # If no matching household_id is found, return 0\n    \n    household_id = household_row.iloc[0]['household_id']\n    \n    # Filter the energy usage data for the given household_id\n    household_energy_data = energy_usage_df[energy_usage_df['household_id'] == household_id]\n    \n    # If no matching data is found, return 0\n    if household_energy_data.empty:\n        return 0\n    \n    # Calculate the total renewable usage and non-renewable usage for the household\n    total_renewable_usage = household_energy_data['renewable_usage'].sum()\n    total_non_renewable_usage = household_energy_data['non_renewable_usage'].sum()\n    total_usage = total_renewable_usage + total_non_renewable_usage\n    \n    # Return the percentage of renewable usage\n    return total_renewable_usage / total_usage if total_usage > 0 else 0\n"
        },
        "0.04109738407359151": {
            "name": "green_energy_cost_differential",
            "code": "\n\ndef green_energy_cost_differential(row, aux_data: Dict[str, pd.DataFrame]):\n    # Define default cost per unit for non-renewable and renewable energy\n    non_renewable_cost_per_unit = 0.15  # Example cost per unit for non-renewable energy\n    renewable_cost_per_unit = 0.10     # Example cost per unit for renewable energy\n\n    # Extract the energy usage data table from aux_data\n    energy_usage_data = aux_data.get('energy_usage_data_table.csv')\n\n    # Ensure the energy usage data is available\n    if energy_usage_data is None:\n        raise ValueError(\"The 'energy_usage_data_table.csv' is missing from aux_data.\")\n\n    # Find the corresponding energy usage row for the given customer_id\n    customer_id = row['customer_id']\n    usage_row = energy_usage_data[energy_usage_data['household_id'] == customer_id]\n\n    # Ensure we found a matching row\n    if usage_row.empty:\n        raise ValueError(f\"No energy usage data found for customer_id {customer_id}.\")\n\n    # Extract the first matching row (assuming household_id is unique)\n    usage_row = usage_row.iloc[0]\n\n    # Calculate the costs based on usage and cost per unit\n    non_renewable_cost = usage_row['non_renewable_usage'] * non_renewable_cost_per_unit\n    renewable_cost = usage_row['renewable_usage'] * renewable_cost_per_unit\n\n    # Return the cost differential\n    return non_renewable_cost - renewable_cost\n"
        },
        "0.037058459689350995": {
            "name": "incentive_type_encoded",
            "code": "\n\ndef incentive_type_encoded(row, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure we are working with the correct dataframe\n    if 'green_incentives_table.csv' not in aux_data:\n        raise ValueError(\"The required 'green_incentives_table.csv' is missing from aux_data.\")\n    \n    # Get the green_incentives_table dataframe\n    green_incentives_df = aux_data['green_incentives_table.csv']\n    \n    # Merge the row's household_id with the green_incentives_table to find the incentive_type\n    household_id = row['customer_id']  # Assuming customer_id maps to household_id\n    incentive_row = green_incentives_df[green_incentives_df['household_id'] == household_id]\n    \n    if incentive_row.empty:\n        return 0  # Return 0 if no matching incentive is found\n    \n    # Get the incentive_type for the household\n    incentive_type = incentive_row.iloc[0]['incentive_type']\n    \n    # Map the incentive_type to its encoded value\n    incentive_types = {'tax_credit': 1, 'rebate': 2, 'grant': 3, 'other': 4}  # Example mapping\n    return incentive_types.get(incentive_type, 0)\n"
        },
        "0.02921759057756906": {
            "name": "excess_renewable_energy",
            "code": "\n\ndef excess_renewable_energy(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the energy usage data table from aux_data\n    energy_usage_data = aux_data['energy_usage_data_table.csv']\n    \n    # Find the renewable usage for the household corresponding to the row's customer_id\n    household_id = aux_data['household_attributes_table.csv'].loc[\n        aux_data['household_attributes_table.csv']['customer_id'] == row['customer_id'], 'household_id'\n    ].values\n    \n    if len(household_id) == 0:\n        # If no household_id is found, return 0 as default\n        return 0\n    \n    household_id = household_id[0]\n    \n    renewable_usage = energy_usage_data.loc[\n        energy_usage_data['household_id'] == household_id, 'renewable_usage'\n    ].sum()  # Sum up renewable usage for the household\n    \n    # Calculate excess renewable energy\n    return max(0, renewable_usage - 100)  # Arbitrary threshold as 100 units\n"
        },
        "0.0249752526499218": {
            "name": "total_energy_usage",
            "code": "\n\ndef total_energy_usage(row, aux_data: Dict[str, pd.DataFrame]):\n    # Retrieve the energy usage data table from aux_data\n    energy_usage_df = aux_data['energy_usage_data_table.csv']\n    \n    # Find the corresponding energy usage row for the given household_id\n    household_id = row['customer_id']\n    energy_usage_row = energy_usage_df[energy_usage_df['household_id'] == household_id]\n    \n    # If no matching row is found, return 0 as the total energy usage\n    if energy_usage_row.empty:\n        return 0\n    \n    # Calculate the total energy usage\n    renewable_usage = energy_usage_row['renewable_usage'].iloc[0]\n    non_renewable_usage = energy_usage_row['non_renewable_usage'].iloc[0]\n    return renewable_usage + non_renewable_usage\n"
        },
        "0.022431741879612166": {
            "name": "regional_interest_score",
            "code": "\n\ndef regional_interest_score(row, df_train, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Load the necessary auxiliary dataframes\n    household_attributes_df = aux_dataframes['household_attributes_table.csv']\n    market_interest_df = aux_dataframes['market_interest_table.csv']\n    \n    # Get the customer_id from the row\n    customer_id = row['customer_id']\n    \n    # Get the region for the given customer_id from household_attributes_df\n    region_row = household_attributes_df.loc[household_attributes_df['customer_id'] == customer_id, 'region']\n    \n    # If the region is not found, return 0\n    if region_row.empty:\n        return 0\n    \n    region = region_row.values[0]\n    \n    # Extract interest score for the household's region from market_interest_df\n    # Note: The column 'region' does not exist in market_interest_df, so we use 'interest_level' instead\n    interest_score_row = market_interest_df.loc[market_interest_df['customer_id'] == customer_id, 'interest_level']\n    \n    # Return the interest score if found, otherwise return 0\n    return interest_score_row.values[0] if not interest_score_row.empty else 0\n"
        },
        "0.014356160334053063": {
            "name": "incentive_per_renewable_energy",
            "code": "\n\ndef incentive_per_renewable_energy(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the household_id from the row\n    household_id = row['customer_id']\n    \n    # Get the green_incentives_table and energy_usage_data_table from aux_data\n    green_incentives = aux_data['green_incentives_table.csv']\n    energy_usage = aux_data['energy_usage_data_table.csv']\n    \n    # Filter the data for the given household_id\n    household_incentives = green_incentives[green_incentives['household_id'] == household_id]\n    household_energy_usage = energy_usage[energy_usage['household_id'] == household_id]\n    \n    # Ensure there is data to work with\n    if household_incentives.empty or household_energy_usage.empty:\n        return 0  # Return 0 if no data is available\n    \n    # Calculate the total incentive value and total renewable usage\n    total_incentive_value = household_incentives['incentive_value'].sum()\n    total_renewable_usage = household_energy_usage['renewable_usage'].sum()\n    \n    # Avoid division by zero\n    if total_renewable_usage > 0:\n        return total_incentive_value / total_renewable_usage\n    else:\n        return 0\n"
        },
        "0.014216449651528934": {
            "name": "usage_intensity_score",
            "code": "import pandas as pd\n\ndef usage_intensity_score(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the household_id using the customer_id from the row\n    household_attributes = aux_data['household_attributes_table.csv']\n    energy_usage_data = aux_data['energy_usage_data_table.csv']\n    \n    # Map customer_id to household_id\n    household_id = household_attributes.loc[\n        household_attributes['customer_id'] == row['customer_id'], 'household_id'\n    ].squeeze()\n    \n    # If household_id is not found, return 0\n    if pd.isna(household_id):\n        return 0\n    \n    # Filter energy usage data for the household_id\n    household_usage = energy_usage_data.loc[\n        energy_usage_data['household_id'] == household_id\n    ]\n    \n    # If no usage data is found, return 0\n    if household_usage.empty:\n        return 0\n    \n    # Calculate total usage\n    total_usage = household_usage['renewable_usage'].sum() + household_usage['non_renewable_usage'].sum()\n    \n    # Get household size\n    household_size = household_attributes.loc[\n        household_attributes['household_id'] == household_id, 'household_size'\n    ].squeeze()\n    \n    # If household_size is not found or is 0, return 0\n    if pd.isna(household_size) or household_size <= 0:\n        return 0\n    \n    # Calculate and return the usage intensity score\n    return total_usage / household_size\n"
        },
        "0.011045140242549632": {
            "name": "normalized_incentive",
            "code": "\n\ndef normalized_incentive(row, df_train: pd.DataFrame, aux_data: Dict[str, pd.DataFrame]):\n    # Ensure we are working with the correct dataframe\n    if 'green_incentives_table.csv' not in aux_data or 'household_attributes_table.csv' not in aux_data:\n        raise ValueError(\"The required 'green_incentives_table.csv' or 'household_attributes_table.csv' is missing from aux_data.\")\n    \n    # Extract the green incentives dataframe and household attributes dataframe\n    green_incentives_df = aux_data['green_incentives_table.csv']\n    household_attributes_df = aux_data['household_attributes_table.csv']\n    \n    # Ensure the required columns exist in the dataframes\n    if 'incentive_value' not in green_incentives_df.columns:\n        raise ValueError(\"'incentive_value' column is missing from the green incentives dataframe.\")\n    if 'household_id' not in household_attributes_df.columns or 'customer_id' not in household_attributes_df.columns:\n        raise ValueError(\"'household_id' or 'customer_id' column is missing from the household attributes dataframe.\")\n    \n    # Calculate the mean incentive value\n    mean_incentive = green_incentives_df['incentive_value'].mean()\n    \n    # Ensure the row has the 'customer_id' column to join with the household attributes table\n    if 'customer_id' not in row:\n        raise ValueError(\"'customer_id' column is missing from the row.\")\n    \n    # Find the corresponding household_id for the customer_id in the row\n    customer_id = row['customer_id']\n    household_row = household_attributes_df[household_attributes_df['customer_id'] == customer_id]\n    \n    # If no matching household_id is found, raise an error or handle it appropriately\n    if household_row.empty:\n        raise ValueError(f\"No matching household_id found for customer_id: {customer_id}\")\n    \n    # Extract the household_id\n    household_id = household_row['household_id'].iloc[0]\n    \n    # Find the corresponding incentive value for the household_id\n    incentive_row = green_incentives_df[green_incentives_df['household_id'] == household_id]\n    \n    # If no matching incentive is found, raise an error or handle it appropriately\n    if incentive_row.empty:\n        raise ValueError(f\"No matching incentive found for household_id: {household_id}\")\n    \n    # Extract the incentive value\n    incentive_value = incentive_row['incentive_value'].iloc[0]\n    \n    # Return the normalized incentive value\n    return incentive_value - mean_incentive\n"
        },
        "0.010760964591614497": {
            "name": "income_percentile",
            "code": "\n\ndef income_percentile(row, df_train, aux_data: Dict[str, pd.DataFrame]):\n    # Access the household_attributes_table.csv dataframe from aux_data\n    household_attributes = aux_data['household_attributes_table.csv']\n    \n    # Ensure the row contains a valid customer_id\n    if 'customer_id' not in row or row['customer_id'] not in household_attributes['customer_id'].values:\n        raise ValueError(\"The row must contain a valid 'customer_id' that exists in the household_attributes_table.csv.\")\n    \n    # Get the income_level for the given customer_id\n    customer_income_level = household_attributes.loc[\n        household_attributes['customer_id'] == row['customer_id'], 'income_level'\n    ].values[0]\n    \n    # Calculate the income percentile\n    income_series = household_attributes['income_level']\n    return (income_series < customer_income_level).mean()\n"
        },
        "0.002497072301304105": {
            "name": "renewable_to_non_renewable_ratio",
            "code": "\n\ndef renewable_to_non_renewable_ratio(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the energy usage data from aux_data\n    energy_usage_data = aux_data.get('energy_usage_data_table.csv')\n    \n    if energy_usage_data is None:\n        raise ValueError(\"The 'energy_usage_data_table.csv' dataframe is missing from aux_data.\")\n    \n    # Match the row's customer_id with the household_id in the energy usage data\n    customer_id = row.get('customer_id')\n    if customer_id is None:\n        raise KeyError(\"The row does not contain the 'customer_id' column.\")\n    \n    # Join the energy usage data with the household attributes to find the matching household_id\n    household_attributes = aux_data.get('household_attributes_table.csv')\n    if household_attributes is None:\n        raise ValueError(\"The 'household_attributes_table.csv' dataframe is missing from aux_data.\")\n    \n    # Find the household_id corresponding to the customer_id\n    household_row = household_attributes[household_attributes['customer_id'] == customer_id]\n    if household_row.empty:\n        raise ValueError(f\"No matching household_id found for customer_id {customer_id}.\")\n    \n    household_id = household_row.iloc[0]['household_id']\n    \n    # Find the energy usage data for the household_id\n    usage_row = energy_usage_data[energy_usage_data['household_id'] == household_id]\n    if usage_row.empty:\n        raise ValueError(f\"No energy usage data found for household_id {household_id}.\")\n    \n    # Calculate the renewable to non-renewable ratio\n    renewable_usage = usage_row.iloc[0]['renewable_usage']\n    non_renewable_usage = usage_row.iloc[0]['non_renewable_usage']\n    \n    if non_renewable_usage > 0:\n        return renewable_usage / non_renewable_usage\n    else:\n        return 0\n"
        },
        "0": {
            "name": "demographic_diversity_index",
            "code": "\n\ndef demographic_diversity_index(row, df_train, aux_data: Dict[str, pd.DataFrame]):\n    # Access household attributes auxiliary dataset\n    attributes_df = aux_data['household_attributes_table.csv']\n    \n    # Retrieve the region for the given customer_id in the row\n    customer_id = row['customer_id']\n    region_row = attributes_df.loc[attributes_df['customer_id'] == customer_id]\n    \n    # Check if the region exists for the given customer_id\n    if region_row.empty:\n        return 0  # Default to 0 if no region data is available for the customer_id\n    \n    # Extract the region\n    region = region_row.iloc[0]['region']\n    \n    # Filter regional data for the extracted region\n    region_attributes = attributes_df.loc[attributes_df['region'] == region]\n    \n    # Calculate the average diversity score for the region\n    if 'diversity_score' in region_attributes.columns:\n        diversity_index = region_attributes['diversity_score'].mean()\n    else:\n        # If 'diversity_score' column is missing, return 0\n        return 0\n    \n    # Return the diversity index; default to 0 if no data is available\n    return diversity_index if not region_attributes.empty else 0\n"
        }
    },
    "feature_descriptions": [
        "renewable usage percentage",
        "green energy cost differential",
        "incentive type encoded",
        "excess renewable energy",
        "total energy usage",
        "regional interest score",
        "incentive per renewable energy",
        "usage intensity score",
        "normalized incentive",
        "income percentile",
        "renewable to non renewable ratio",
        "demographic diversity index"
    ]
}