{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "collateral_ratio",
        "loan_monthly_payment",
        "loan_to_income_ratio",
        "is_high_collateral",
        "employment_income_ratio",
        "number_of_active_loans",
        "loan_interest_burden",
        "age",
        "loan_total_amount_ratio",
        "loan_duration_years",
        "annual_income_category",
        "maximum_late_days"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.35246796988806617": {
            "name": "collateral_ratio",
            "code": "\n\ndef collateral_ratio(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the loan_id from the current row\n    loan_id = row['loan_id']\n    \n    # Access the loan_table dataframe from aux_data\n    loan_table = aux_data.get('loan_table.csv')\n    \n    # Ensure the loan_table exists and is not None\n    if loan_table is None:\n        raise ValueError(\"The 'loan_table.csv' dataframe is missing from aux_data.\")\n    \n    # Find the row in loan_table corresponding to the current loan_id\n    loan_row = loan_table[loan_table['loan_id'] == loan_id]\n    \n    # If no matching loan_id is found, return 0 (or handle as needed)\n    if loan_row.empty:\n        return 0\n    \n    # Extract collateral_value and loan_amount\n    collateral_value = loan_row.iloc[0]['collateral_value']\n    loan_amount = loan_row.iloc[0]['loan_amount']\n    \n    # Handle the case where collateral_value is 0 to avoid division by zero\n    if collateral_value == 0:\n        return 0\n    \n    # Calculate and return the collateral ratio\n    return collateral_value / loan_amount\n"
        },
        "0.22519563609240084": {
            "name": "loan_monthly_payment",
            "code": "\n\ndef loan_monthly_payment(row, aux_data: Dict[str, pd.DataFrame]):\n    # Retrieve the loan_table dataframe from aux_data\n    loan_table = aux_data['loan_table.csv']\n    \n    # Find the loan details for the given loan_id in the row\n    loan_details = loan_table[loan_table['loan_id'] == row['loan_id']]\n    \n    # Ensure the loan exists in the loan_table\n    if loan_details.empty:\n        raise ValueError(f\"Loan ID {row['loan_id']} not found in loan_table.csv\")\n    \n    # Extract the loan amount and loan term in months\n    loan_amount = loan_details.iloc[0]['loan_amount']\n    loan_term_months = loan_details.iloc[0]['loan_term_months']\n    \n    # Calculate the monthly payment\n    return loan_amount / loan_term_months\n"
        },
        "0.2172622851022383": {
            "name": "loan_to_income_ratio",
            "code": "\n\ndef loan_to_income_ratio(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the loan_id from the row\n    loan_id = row['loan_id']\n    \n    # Get the loan_table and customer_table from aux_data\n    loan_table = aux_data['loan_table.csv']\n    customer_table = aux_data['customer_table.csv']\n    \n    # Find the loan details for the given loan_id\n    loan_details = loan_table[loan_table['loan_id'] == loan_id]\n    if loan_details.empty:\n        raise ValueError(f\"Loan ID {loan_id} not found in loan_table.csv\")\n    \n    # Extract the customer_id and loan_amount\n    customer_id = loan_details.iloc[0]['customer_id']\n    loan_amount = loan_details.iloc[0]['loan_amount']\n    \n    # Find the customer details for the given customer_id\n    customer_details = customer_table[customer_table['customer_id'] == customer_id]\n    if customer_details.empty:\n        raise ValueError(f\"Customer ID {customer_id} not found in customer_table.csv\")\n    \n    # Extract the annual_income\n    annual_income = customer_details.iloc[0]['annual_income']\n    \n    # Calculate and return the loan-to-income ratio\n    if annual_income == 0:\n        raise ValueError(f\"Annual income for customer ID {customer_id} is zero, cannot calculate ratio\")\n    \n    return loan_amount / annual_income\n"
        },
        "0.17656146808845063": {
            "name": "is_high_collateral",
            "code": "\n\ndef is_high_collateral(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the loan_table dataframe from aux_data\n    loan_table = aux_data['loan_table.csv']\n    \n    # Find the loan_id in the loan_table\n    loan_id = row['loan_id']\n    loan_row = loan_table[loan_table['loan_id'] == loan_id]\n    \n    # If the loan_id is not found, return 0 (default to not high collateral)\n    if loan_row.empty:\n        return 0\n    \n    # Extract collateral_value and loan_amount\n    collateral_value = loan_row.iloc[0]['collateral_value']\n    loan_amount = loan_row.iloc[0]['loan_amount']\n    \n    # Return 1 if collateral_value > loan_amount, otherwise 0\n    return 1 if collateral_value > loan_amount else 0\n"
        },
        "0.12594495803948136": {
            "name": "employment_income_ratio",
            "code": "\n\ndef employment_income_ratio(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the customer_table dataframe from aux_data\n    customer_table = aux_data['customer_table.csv']\n    \n    # Find the customer_id associated with the loan_id in the row\n    loan_table = aux_data['loan_table.csv']\n    loan_row = loan_table[loan_table['loan_id'] == row['loan_id']]\n    \n    if loan_row.empty:\n        raise ValueError(f\"Loan ID {row['loan_id']} not found in loan_table.\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Find the customer's employment status\n    customer_row = customer_table[customer_table['customer_id'] == customer_id]\n    \n    if customer_row.empty:\n        raise ValueError(f\"Customer ID {customer_id} not found in customer_table.\")\n    \n    employment_status = customer_row.iloc[0]['employment_status']\n    annual_income = customer_row.iloc[0]['annual_income']\n    \n    # Determine the employment factor\n    employment_factor = 1.5 if employment_status.lower() == 'self employed' else 1\n    \n    # Calculate and return the employment income ratio\n    return annual_income * employment_factor\n"
        },
        "0.08205936891545731": {
            "name": "number_of_active_loans",
            "code": "\n\ndef number_of_active_loans(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'loan_table.csv' exists in aux_dataframes\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'loan_table.csv' is missing from aux_dataframes.\")\n    \n    # Access the loan_table dataframe\n    loan_table = aux_dataframes['loan_table.csv']\n    \n    # Ensure the row contains a valid loan_id\n    if 'loan_id' not in row:\n        raise KeyError(\"The row does not contain a 'loan_id' column.\")\n    \n    # Retrieve the customer_id using the loan_id from the row\n    loan_id = row['loan_id']\n    if loan_id not in loan_table['loan_id'].values:\n        raise ValueError(f\"Loan ID {loan_id} not found in loan_table.\")\n    \n    customer_id = loan_table.loc[loan_table['loan_id'] == loan_id, 'customer_id'].values[0]\n    \n    # Filter loans for the given customer_id\n    customer_loans = loan_table[loan_table['customer_id'] == customer_id]\n    \n    # Filter active loans based on the correct column name 'loan_status'\n    active_loans = customer_loans[customer_loans['loan_status'] == 'Active']\n    \n    # Return the count of active loans\n    return len(active_loans)\n"
        },
        "0.07536277480684883": {
            "name": "loan_interest_burden",
            "code": "\n\ndef loan_interest_burden(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> float:\n    \"\"\"\n    Calculate the loan interest burden for a given customer based on their loans.\n\n    Args:\n        row (pd.Series): A row from a DataFrame containing at least a 'loan_id' column.\n        aux_dataframes (Dict[str, pd.DataFrame]): A dictionary of auxiliary DataFrames, \n                                                  including 'loan_table.csv'.\n\n    Returns:\n        float: The loan interest burden for the customer. Returns 0 if no loans are found.\n    \"\"\"\n    # Check if 'loan_table.csv' exists in aux_dataframes\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"'loan_table.csv' is missing from aux_dataframes. Please provide the correct data.\")\n    \n    # Retrieve the loan_table DataFrame\n    loan_table = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the loan_table\n    required_columns = {'customer_id', 'loan_id', 'loan_amount', 'interest_rate'}\n    if not required_columns.issubset(loan_table.columns):\n        raise KeyError(f\"The loan_table is missing one or more required columns: {required_columns}\")\n    \n    # Ensure the row contains a 'loan_id' column\n    if 'loan_id' not in row:\n        raise KeyError(\"The input row is missing the 'loan_id' column.\")\n    \n    # Retrieve the customer_id using the loan_id from the input row\n    loan_id = row['loan_id']\n    loan_row = loan_table[loan_table['loan_id'] == loan_id]\n    \n    if loan_row.empty:\n        raise ValueError(f\"No loan found in loan_table for loan_id: {loan_id}\")\n    \n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Filter loans for the given customer_id\n    customer_loans = loan_table[loan_table['customer_id'] == customer_id]\n    \n    # If the customer has no loans, return 0 to avoid errors\n    if customer_loans.empty:\n        return 0.0\n    \n    # Calculate the loan interest burden\n    average_interest_rate = customer_loans['interest_rate'].mean()\n    total_loan_amount = customer_loans['loan_amount'].sum()\n    return average_interest_rate * total_loan_amount\n"
        },
        "0.06171530557077739": {
            "name": "age",
            "code": "import datetime\n\ndef age(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the loan_id from the row\n    loan_id = row['loan_id']\n    \n    # Get the loan_table dataframe from aux_data\n    loan_table = aux_data['loan_table.csv']\n    \n    # Find the row in the loan_table corresponding to the loan_id\n    loan_row = loan_table[loan_table['loan_id'] == loan_id]\n    \n    # If the loan_id is not found, return None\n    if loan_row.empty:\n        return None\n    \n    # Extract the customer_id for the loan\n    customer_id = loan_row.iloc[0]['customer_id']\n    \n    # Get the customer_table dataframe from aux_data\n    customer_table = aux_data['customer_table.csv']\n    \n    # Find the row in the customer_table corresponding to the customer_id\n    customer_row = customer_table[customer_table['customer_id'] == customer_id]\n    \n    # If the customer_id is not found, return None\n    if customer_row.empty:\n        return None\n    \n    # Extract the date_of_birth for the customer\n    date_of_birth = customer_row.iloc[0]['date_of_birth']\n    \n    # Parse the date_of_birth and calculate the age\n    try:\n        birth_date = datetime.datetime.strptime(date_of_birth, \"%Y-%m-%d\")\n    except ValueError:\n        # If the date_of_birth is not in the expected format, return None\n        return None\n    \n    # Calculate the age\n    today = datetime.datetime.now()\n    age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))\n    \n    return age\n"
        },
        "0.037113411387028755": {
            "name": "loan_total_amount_ratio",
            "code": "\n\ndef loan_total_amount_ratio(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'loan_table.csv' is used correctly to access the loan table\n    if 'loan_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'loan_table.csv' is missing from aux_dataframes.\")\n    \n    loan_table = aux_dataframes['loan_table.csv']\n    \n    # Ensure the required columns exist in the loan_table\n    required_columns = {'customer_id', 'loan_id', 'loan_amount'}\n    if not required_columns.issubset(loan_table.columns):\n        raise ValueError(f\"The loan_table is missing one or more required columns: {required_columns}\")\n    \n    # Map the loan_id from the row to the corresponding customer_id in the loan_table\n    if 'loan_id' not in row:\n        raise KeyError(\"The row is missing the 'loan_id' column.\")\n    \n    loan_id = row['loan_id']\n    if loan_id not in loan_table['loan_id'].values:\n        raise ValueError(f\"Loan ID {loan_id} not found in the loan_table.\")\n    \n    # Get the customer_id for the given loan_id\n    customer_id = loan_table.loc[loan_table['loan_id'] == loan_id, 'customer_id'].values[0]\n    \n    # Filter loans for the specific customer\n    customer_loans = loan_table[loan_table['customer_id'] == customer_id]\n    \n    # Calculate the total loan amount across all customers\n    total_amount = loan_table['loan_amount'].sum()\n    \n    # Handle the case where total_amount is zero to avoid division by zero\n    if total_amount == 0:\n        return 0  # Return 0 if there are no loans in the table\n    \n    # Calculate and return the ratio of the customer's loan amount to the total loan amount\n    return customer_loans['loan_amount'].sum() / total_amount\n"
        },
        "0.012904401555431402": {
            "name": "loan_duration_years",
            "code": "\n\ndef loan_duration_years(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the loan_id from the row\n    loan_id = row['loan_id']\n    \n    # Look up the loan_table dataframe from aux_data\n    loan_table = aux_data['loan_table.csv']\n    \n    # Find the corresponding row in the loan_table for the given loan_id\n    loan_row = loan_table[loan_table['loan_id'] == loan_id]\n    \n    # Ensure the loan_row is not empty\n    if loan_row.empty:\n        raise ValueError(f\"Loan ID {loan_id} not found in loan_table.csv\")\n    \n    # Extract the loan_term_months value\n    loan_term_months = loan_row.iloc[0]['loan_term_months']\n    \n    # Calculate and return the loan duration in years\n    return loan_term_months / 12\n"
        },
        "0.007956606701351343": {
            "name": "annual_income_category",
            "code": "\n\ndef annual_income_category(row, aux_data: Dict[str, pd.DataFrame]):\n    # Extract the customer_id from the row\n    loan_id = row['loan_id']\n    \n    # Get the loan_table to find the customer_id associated with the loan_id\n    loan_table = aux_data['loan_table.csv']\n    customer_id = loan_table.loc[loan_table['loan_id'] == loan_id, 'customer_id'].values\n    \n    # If customer_id is not found, return None\n    if len(customer_id) == 0:\n        return None\n    customer_id = customer_id[0]\n    \n    # Get the customer_table to find the annual_income for the customer_id\n    customer_table = aux_data['customer_table.csv']\n    annual_income = customer_table.loc[customer_table['customer_id'] == customer_id, 'annual_income'].values\n    \n    # If annual_income is not found, return None\n    if len(annual_income) == 0:\n        return None\n    annual_income = annual_income[0]\n    \n    # Categorize the annual income\n    if annual_income < 50000:\n        return 'Low'\n    elif 50000 <= annual_income <= 100000:\n        return 'Medium'\n    else:\n        return 'High'\n"
        },
        "0": {
            "name": "maximum_late_days",
            "code": "import pandas as pd\n\ndef maximum_late_days(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'payment_table.csv' exists in aux_dataframes\n    if 'payment_table.csv' not in aux_dataframes:\n        raise KeyError(\"'payment_table.csv' not found in aux_dataframes\")\n    \n    # Access the payment_table dataframe\n    payment_table = aux_dataframes['payment_table.csv']\n    \n    # Check if the required columns exist in the payment_table\n    required_columns = {'loan_id', 'payment_date', 'payment_status'}\n    if not required_columns.issubset(payment_table.columns):\n        raise KeyError(f\"Missing required columns in payment_table: {required_columns - set(payment_table.columns)}\")\n    \n    # Filter payments for the specific loan\n    loan_payments = payment_table[payment_table['loan_id'] == row['loan_id']]\n    \n    # Ensure the 'payment_date' and 'scheduled_repayment_date' columns are present in the row\n    if 'scheduled_repayment_date' not in row or 'repayment_date' not in row:\n        raise KeyError(\"Missing 'scheduled_repayment_date' or 'repayment_date' in the row\")\n    \n    # Convert dates to datetime for calculation\n    loan_payments['payment_date'] = pd.to_datetime(loan_payments['payment_date'], errors='coerce')\n    scheduled_repayment_date = pd.to_datetime(row['scheduled_repayment_date'], errors='coerce')\n    \n    # Calculate late days for each payment\n    loan_payments['late_days'] = (loan_payments['payment_date'] - scheduled_repayment_date).dt.days\n    loan_payments['late_days'] = loan_payments['late_days'].apply(lambda x: max(x, 0))  # Ensure no negative late days\n    \n    # Filter late payments based on the 'payment_status' column\n    late_payments = loan_payments[loan_payments['payment_status'] == 'Late']\n    \n    # Return the maximum late days or 0 if no late payments exist\n    return late_payments['late_days'].max() if not late_payments.empty else 0\n"
        }
    },
    "feature_descriptions": [
        "collateral ratio",
        "loan monthly payment",
        "loan to income ratio",
        "is high collateral",
        "employment income ratio",
        "number of active loans",
        "loan interest burden",
        "age",
        "loan total amount ratio",
        "loan duration years",
        "annual income category",
        "maximum late days"
    ]
}