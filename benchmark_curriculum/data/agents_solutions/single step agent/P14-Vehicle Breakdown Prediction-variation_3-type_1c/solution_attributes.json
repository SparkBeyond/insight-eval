{
    "solved_by": "single step agent",
    "enriched_column_names": [
        "days_since_last_maintenance",
        "vehicle_age",
        "route_efficiency_ratio",
        "maintenance_delay_factor",
        "monitoring_precipitation_levels",
        "weather_impact_index",
        "average_maintenance_duration",
        "cumulative_distance_traveled",
        "fuel_usage_ratio",
        "route_speed_deviation",
        "route_time_variance",
        "total_maintenance_cost",
        "variance_in_engine_temperature",
        "average_fuel_efficiency",
        "engine_temperature_stability",
        "maintenance_cost_per_kilometer",
        "maintenance_event_frequency"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.1979890718248583": {
            "name": "days_since_last_maintenance",
            "code": "import pandas as pd\n\ndef days_since_last_maintenance(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    vehicle_id = row['vehicle_id']\n    \n    # Correct key for the vehicle performance data\n    if 'vehicle_performance_data.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'vehicle_performance_data.csv' is missing in aux_dataframes.\")\n    \n    maintenance_data = aux_dataframes['vehicle_performance_data.csv']\n    \n    # Ensure the dataframe contains the required columns\n    if 'vehicle_id' not in maintenance_data.columns or 'date' not in maintenance_data.columns:\n        raise KeyError(\"The dataframe 'vehicle_performance_data.csv' is missing required columns: 'vehicle_id' and 'date'.\")\n    \n    # Filter for the specific vehicle and find the most recent maintenance date\n    last_maintenance = maintenance_data[maintenance_data['vehicle_id'] == vehicle_id]['date'].max()\n    \n    # Calculate the days since the last maintenance\n    if pd.notna(last_maintenance):\n        return (pd.to_datetime(row['maintenance_date']) - pd.to_datetime(last_maintenance)).days\n    else:\n        return float('inf')\n"
        },
        "0.18304518668173703": {
            "name": "vehicle_age",
            "code": "import pandas as pd\n\ndef vehicle_age(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Access the correct dataframe using the key 'vehicle_performance_data.csv'\n    if 'vehicle_performance_data.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'vehicle_performance_data.csv' is missing in aux_dataframes.\")\n    \n    performance_data = aux_dataframes['vehicle_performance_data.csv']\n    \n    # Check if the required columns exist\n    if 'vehicle_id' not in performance_data.columns or 'date' not in performance_data.columns:\n        raise KeyError(\"The required columns 'vehicle_id' and 'date' are missing in the vehicle_performance_data.csv dataframe.\")\n    \n    # Filter the performance data for the specific vehicle_id\n    vehicle_info = performance_data[performance_data['vehicle_id'] == row['vehicle_id']]\n    \n    # Ensure there is at least one matching record\n    if vehicle_info.empty:\n        raise ValueError(f\"No performance data found for vehicle_id {row['vehicle_id']}.\")\n    \n    # Infer the manufacture_date as the earliest date for the vehicle_id\n    manufacture_date = pd.to_datetime(vehicle_info['date'].min())\n    \n    # Parse the maintenance_date from the row\n    maintenance_date = pd.to_datetime(row['maintenance_date'])\n    \n    # Calculate the vehicle age\n    return maintenance_date.year - manufacture_date.year\n"
        },
        "0.06415067269584518": {
            "name": "route_efficiency_ratio",
            "code": "\n\ndef route_efficiency_ratio(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Check if 'logistic_routes' key exists in aux_dataframes\n    if 'logistic_routes.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'logistic_routes.csv' is missing from aux_dataframes.\")\n    \n    # Get the logistic_routes dataframe from aux_dataframes\n    routes_data = aux_dataframes['logistic_routes.csv']\n    \n    # Ensure the required columns exist in the logistic_routes dataframe\n    required_columns = {'vehicle_id', 'planned_duration', 'actual_duration'}\n    if not required_columns.issubset(routes_data.columns):\n        raise ValueError(f\"The dataframe 'logistic_routes.csv' is missing one or more required columns: {required_columns}\")\n    \n    # Extract the vehicle_id from the row\n    vehicle_id = row['vehicle_id']\n    \n    # Filter the routes_data to include only rows for the given vehicle_id\n    vehicle_routes = routes_data[routes_data['vehicle_id'] == vehicle_id]\n    \n    # If no routes are found for the vehicle, return 0 to avoid division by zero\n    if vehicle_routes.empty:\n        return 0\n    \n    # Calculate the mean planned_duration and actual_duration for the vehicle's routes\n    planned_duration = vehicle_routes['planned_duration'].mean()\n    actual_duration = vehicle_routes['actual_duration'].mean()\n    \n    # Return the efficiency ratio, ensuring no division by zero\n    return actual_duration / planned_duration if planned_duration > 0 else 0\n"
        },
        "0.05855914092019464": {
            "name": "maintenance_delay_factor",
            "code": "\n\ndef maintenance_delay_factor(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    vehicle_id = row['vehicle_id']\n    \n    # Access the logistic_routes.csv dataframe from aux_dataframes\n    logistic_routes_data = aux_dataframes['logistic_routes.csv']\n    \n    # Ensure the necessary columns exist in the dataframe\n    required_columns = {'vehicle_id', 'planned_duration', 'actual_duration'}\n    if not required_columns.issubset(logistic_routes_data.columns):\n        raise KeyError(f\"The required columns {required_columns} are missing from the 'logistic_routes.csv' dataframe.\")\n    \n    # Filter the data for the specific vehicle_id\n    vehicle_routes = logistic_routes_data[logistic_routes_data['vehicle_id'] == vehicle_id]\n    \n    # Calculate delays as the difference between actual_duration and planned_duration\n    vehicle_routes['delay_duration'] = vehicle_routes['actual_duration'] - vehicle_routes['planned_duration']\n    \n    # Return the mean of delays or 0 if no delays are found\n    return vehicle_routes['delay_duration'].mean() if not vehicle_routes.empty else 0\n"
        },
        "0.056114647823926354": {
            "name": "monitoring_precipitation_levels",
            "code": "\n\ndef monitoring_precipitation_levels(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Computes the average precipitation for the routes the vehicle operates in.\n    Utilizes the `weather_conditions.csv` and `logistic_routes.csv` auxiliary datasets.\n\n    Parameters:\n        row (pd.Series): A single record (row) in the DataFrame.\n        df_train (pd.DataFrame): The training dataset for reference.\n        aux_dataframes (dict): Dictionary containing auxiliary datasets.\n\n    Returns:\n        float: Average precipitation level for the routes associated with the vehicle.\n    \"\"\"\n    # Extract the vehicle_id from the row\n    vehicle_id = row['vehicle_id']\n    \n    # Get the logistic_routes and weather_conditions auxiliary datasets\n    logistic_routes = aux_dataframes['logistic_routes.csv']\n    weather_data = aux_dataframes['weather_conditions.csv']\n    \n    # Find all route_ids associated with the vehicle_id\n    vehicle_routes = logistic_routes[logistic_routes['vehicle_id'] == vehicle_id]\n    \n    if vehicle_routes.empty:\n        # If no routes are found for the vehicle, return NaN\n        return float('nan')\n    \n    # Get the route_ids for the vehicle\n    route_ids = vehicle_routes['route_id'].unique()\n    \n    # Filter the weather data for the relevant route_ids\n    relevant_weather_data = weather_data[weather_data['region_id'].isin(route_ids)]\n    \n    if relevant_weather_data.empty:\n        # If no weather data is found for the routes, return NaN\n        return float('nan')\n    \n    # Calculate and return the average precipitation level\n    return relevant_weather_data['precipitation'].mean()\n"
        },
        "0.05458256939909087": {
            "name": "weather_impact_index",
            "code": "\n\ndef weather_impact_index(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Extract the vehicle_id from the row\n    vehicle_id = row['vehicle_id']\n    \n    # Get the logistic_routes dataframe from aux_dataframes\n    logistic_routes = aux_dataframes['logistic_routes.csv']\n    \n    # Map the vehicle_id to the corresponding route_id\n    route_ids = logistic_routes[logistic_routes['vehicle_id'] == vehicle_id]['route_id']\n    \n    # If no route_id is found, return NaN\n    if route_ids.empty:\n        return float('nan')\n    \n    # Get the weather_conditions dataframe from aux_dataframes\n    weather_data = aux_dataframes['weather_conditions.csv']\n    \n    # Filter weather data for the relevant route_ids\n    relevant_weather_data = weather_data[weather_data['region_id'].isin(route_ids)]\n    \n    # If no relevant weather data is found, return NaN\n    if relevant_weather_data.empty:\n        return float('nan')\n    \n    # Define an impact score based on available weather data\n    # For example, we can calculate the impact score as a weighted sum of precipitation and wind_speed\n    relevant_weather_data['impact_score'] = (\n        relevant_weather_data['precipitation'] * 0.6 +  # Assign a weight to precipitation\n        relevant_weather_data['wind_speed'] * 0.4       # Assign a weight to wind speed\n    )\n    \n    # Calculate and return the mean impact_score\n    return relevant_weather_data['impact_score'].mean()\n"
        },
        "0.04437309962059899": {
            "name": "average_maintenance_duration",
            "code": "\n\ndef average_maintenance_duration(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    vehicle_id = row['vehicle_id']\n    \n    # Ensure the 'maintenance_duration' column is accessed from the main DataFrame (df_train)\n    if 'maintenance_duration' not in df_train.columns:\n        raise KeyError(\"The column 'maintenance_duration' does not exist in the main DataFrame (df_train).\")\n    \n    # Filter the main DataFrame (df_train) for the specific vehicle_id and calculate the mean\n    vehicle_maintenance_data = df_train[df_train['vehicle_id'] == vehicle_id]\n    return vehicle_maintenance_data['maintenance_duration'].mean()\n"
        },
        "0.032774308315164": {
            "name": "cumulative_distance_traveled",
            "code": "\n\ndef cumulative_distance_traveled(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'vehicle_performance_data' exists in aux_dataframes\n    if 'vehicle_performance_data.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'vehicle_performance_data.csv' is missing from aux_dataframes.\")\n    \n    # Access the vehicle performance data\n    performance_data = aux_dataframes['vehicle_performance_data.csv']\n    \n    # Ensure the required columns exist in the dataframe\n    required_columns = {'vehicle_id', 'distance_traveled'}\n    if not required_columns.issubset(performance_data.columns):\n        raise ValueError(f\"The dataframe 'vehicle_performance_data.csv' is missing required columns: {required_columns - set(performance_data.columns)}\")\n    \n    # Extract the vehicle_id from the row\n    vehicle_id = row['vehicle_id']\n    \n    # Filter the performance data for the given vehicle_id and calculate the cumulative distance\n    cumulative_distance = performance_data[performance_data['vehicle_id'] == vehicle_id]['distance_traveled'].sum()\n    \n    return cumulative_distance\n"
        },
        "0.021734538712437915": {
            "name": "fuel_usage_ratio",
            "code": "\n\ndef fuel_usage_ratio(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the correct key is used to access the vehicle performance data\n    if 'vehicle_performance_data.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'vehicle_performance_data.csv' is missing from aux_dataframes.\")\n    \n    # Access the vehicle performance data\n    performance_data = aux_dataframes['vehicle_performance_data.csv']\n    \n    # Extract the vehicle_id from the row\n    vehicle_id = row['vehicle_id']\n    \n    # Filter the performance data for the given vehicle_id\n    vehicle_data = performance_data[performance_data['vehicle_id'] == vehicle_id]\n    \n    # Calculate the total fuel used and total distance traveled\n    fuel_used = vehicle_data['fuel_efficiency'].sum()  # Assuming 'fuel_efficiency' represents fuel used\n    distance = vehicle_data['distance_traveled'].sum()\n    \n    # Return the fuel usage ratio, handling the case where distance is zero\n    return fuel_used / distance if distance > 0 else 0\n"
        },
        "0.01903469615567556": {
            "name": "route_speed_deviation",
            "code": "\n\ndef route_speed_deviation(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Extract the vehicle_id from the row\n    vehicle_id = row['vehicle_id']\n    \n    # Ensure the correct key is used to access the logistic_routes dataframe\n    if 'logistic_routes.csv' not in aux_dataframes:\n        raise KeyError(\"'logistic_routes.csv' is missing in the aux_dataframes dictionary\")\n    \n    # Get the logistic_routes dataframe from aux_dataframes\n    routes_data = aux_dataframes['logistic_routes.csv']\n    \n    # Check if the required columns exist in the logistic_routes dataframe\n    required_columns = {'vehicle_id', 'route_distance', 'actual_duration'}\n    if not required_columns.issubset(routes_data.columns):\n        raise KeyError(f\"The logistic_routes dataframe is missing one or more required columns: {required_columns}\")\n    \n    # Filter the logistic_routes dataframe to find all routes for the given vehicle_id\n    vehicle_routes = routes_data[routes_data['vehicle_id'] == vehicle_id]\n    \n    # Check if there are any routes for the given vehicle_id\n    if vehicle_routes.empty:\n        # If no routes are found, return None\n        return None\n    \n    # Calculate the speed for each route (speed = route_distance / actual_duration)\n    # Ensure we handle cases where actual_duration is zero to avoid division by zero\n    vehicle_routes = vehicle_routes[vehicle_routes['actual_duration'] > 0]\n    if vehicle_routes.empty:\n        return None  # If all durations are zero, return None\n    \n    vehicle_routes['speed'] = vehicle_routes['route_distance'] / vehicle_routes['actual_duration']\n    \n    # Calculate and return the standard deviation of the 'speed' column\n    return vehicle_routes['speed'].std()\n"
        },
        "0.018755182294258453": {
            "name": "route_time_variance",
            "code": "\n\ndef route_time_variance(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Check if 'logistic_routes' exists in aux_dataframes\n    if 'logistic_routes.csv' not in aux_dataframes:\n        raise KeyError(\"'logistic_routes.csv' is not found in aux_dataframes. Please check the input data.\")\n    \n    # Access the logistic_routes dataframe from aux_dataframes\n    routes_data = aux_dataframes['logistic_routes.csv']\n    \n    # Ensure the required columns exist in the logistic_routes dataframe\n    required_columns = {'vehicle_id', 'actual_duration'}\n    if not required_columns.issubset(routes_data.columns):\n        raise KeyError(f\"The logistic_routes dataframe is missing one or more required columns: {required_columns}\")\n    \n    # Extract the vehicle_id from the row\n    vehicle_id = row['vehicle_id']\n    \n    # Filter the routes_data dataframe for the given vehicle_id\n    filtered_routes = routes_data[routes_data['vehicle_id'] == vehicle_id]\n    \n    # Check if the filtered dataframe is not empty\n    if not filtered_routes.empty:\n        # Calculate and return the variance of the 'actual_duration' column\n        return filtered_routes['actual_duration'].var()\n    else:\n        # If no matching routes are found, return None\n        return None\n"
        },
        "0.014846066030716507": {
            "name": "total_maintenance_cost",
            "code": "\n\ndef total_maintenance_cost(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    vehicle_id = row['vehicle_id']\n    \n    # Correct key for the logistic routes data\n    maintenance_data = df_train  # The dataframe being iterated over contains the 'maintenance_cost' column\n    \n    # Ensure the column name matches the data\n    if 'maintenance_cost' not in maintenance_data.columns:\n        raise KeyError(\"The column 'maintenance_cost' does not exist in the dataframe being iterated over.\")\n    \n    # Filter by vehicle_id and calculate the total maintenance cost\n    return maintenance_data[maintenance_data['vehicle_id'] == vehicle_id]['maintenance_cost'].sum()\n"
        },
        "0.005380138662017634": {
            "name": "variance_in_engine_temperature",
            "code": "\n\ndef variance_in_engine_temperature(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    vehicle_id = row['vehicle_id']\n    \n    # Correcting the key to match the filename in aux_dataframes\n    performance_data = aux_dataframes['vehicle_performance_data.csv']\n    \n    # Ensure the column names match the expected structure\n    if 'vehicle_id' not in performance_data.columns or 'engine_temperature' not in performance_data.columns:\n        raise KeyError(\"The required columns 'vehicle_id' or 'engine_temperature' are missing in the performance_data dataframe.\")\n    \n    # Calculate and return the variance of engine temperature for the given vehicle_id\n    return performance_data[performance_data['vehicle_id'] == vehicle_id]['engine_temperature'].var()\n"
        },
        "0.004968265864030779": {
            "name": "average_fuel_efficiency",
            "code": "\n\ndef average_fuel_efficiency(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    vehicle_id = row['vehicle_id']\n    \n    # Access the correct dataframe using the filename key\n    performance_data = aux_dataframes['vehicle_performance_data.csv']\n    \n    # Ensure the column names and data types are correct\n    if 'vehicle_id' in performance_data.columns and 'fuel_efficiency' in performance_data.columns:\n        # Filter the dataframe for the specific vehicle_id and calculate the mean fuel efficiency\n        return performance_data[performance_data['vehicle_id'] == vehicle_id]['fuel_efficiency'].mean()\n    else:\n        # Handle the case where the required columns are missing\n        raise KeyError(\"The required columns 'vehicle_id' and 'fuel_efficiency' are not present in the performance_data dataframe.\")\n"
        },
        "0.0031423633238057557": {
            "name": "engine_temperature_stability",
            "code": "\n\ndef engine_temperature_stability(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'vehicle_performance_data.csv' exists in aux_dataframes\n    if 'vehicle_performance_data.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'vehicle_performance_data.csv' is missing from aux_dataframes.\")\n    \n    # Retrieve the vehicle performance data\n    performance_data = aux_dataframes['vehicle_performance_data.csv']\n    \n    # Ensure the required columns exist in the performance data\n    required_columns = {'vehicle_id', 'engine_temperature'}\n    if not required_columns.issubset(performance_data.columns):\n        raise ValueError(f\"The dataframe 'vehicle_performance_data.csv' is missing required columns: {required_columns - set(performance_data.columns)}\")\n    \n    # Extract the vehicle_id from the row\n    vehicle_id = row['vehicle_id']\n    \n    # Filter the performance data for the given vehicle_id\n    vehicle_data = performance_data[performance_data['vehicle_id'] == vehicle_id]\n    \n    # Check if there is any data for the given vehicle_id\n    if vehicle_data.empty:\n        return None  # Return None if no data is available for the vehicle\n    \n    # Calculate and return the standard deviation of engine temperature\n    return vehicle_data['engine_temperature'].std()\n"
        },
        "0.0018120775950207495": {
            "name": "maintenance_cost_per_kilometer",
            "code": "\n\ndef maintenance_cost_per_kilometer(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'vehicle_performance_data.csv' exists in aux_dataframes\n    if 'vehicle_performance_data.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'vehicle_performance_data.csv' is missing from aux_dataframes.\")\n    \n    # Get the vehicle performance data\n    performance_data = aux_dataframes['vehicle_performance_data.csv']\n    \n    # Ensure the required columns exist in the performance data\n    required_columns = {'vehicle_id', 'distance_traveled', 'fuel_efficiency'}\n    if not required_columns.issubset(performance_data.columns):\n        raise ValueError(f\"The dataframe 'vehicle_performance_data.csv' is missing one or more required columns: {required_columns}\")\n    \n    # Extract the vehicle_id from the row\n    vehicle_id = row['vehicle_id']\n    \n    # Filter the performance data for the given vehicle_id\n    vehicle_data = performance_data[performance_data['vehicle_id'] == vehicle_id]\n    \n    # Calculate the total maintenance cost and total distance traveled\n    # Since 'maintenance_cost' is not in the performance data, we use a proxy metric\n    # For example, we can estimate maintenance cost using fuel efficiency and distance traveled\n    # Assuming maintenance cost is inversely proportional to fuel efficiency\n    vehicle_data['estimated_maintenance_cost'] = vehicle_data['distance_traveled'] / vehicle_data['fuel_efficiency']\n    \n    total_cost = vehicle_data['estimated_maintenance_cost'].sum()\n    total_distance = vehicle_data['distance_traveled'].sum()\n    \n    # Return the maintenance cost per kilometer, handling division by zero\n    return total_cost / total_distance if total_distance > 0 else 0\n"
        },
        "0": {
            "name": "maintenance_event_frequency",
            "code": "\n\ndef maintenance_event_frequency(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    vehicle_id = row['vehicle_id']\n    \n    # Correcting the key to match the provided aux_dataframes structure\n    maintenance_data = aux_dataframes['vehicle_performance_data.csv']\n    \n    # Ensure the column names match the expected structure\n    if 'vehicle_id' not in maintenance_data.columns:\n        raise KeyError(\"The 'vehicle_id' column is missing in the 'vehicle_performance_data.csv' dataframe.\")\n    \n    # Calculate the frequency of maintenance events for the given vehicle\n    return maintenance_data[maintenance_data['vehicle_id'] == vehicle_id].shape[0] / len(maintenance_data)\n"
        }
    },
    "feature_descriptions": [
        "days since last maintenance",
        "vehicle age",
        "route efficiency ratio",
        "maintenance delay factor",
        "monitoring precipitation levels",
        "weather impact index",
        "average maintenance duration",
        "cumulative distance traveled",
        "fuel usage ratio",
        "route speed deviation",
        "route time variance",
        "total maintenance cost",
        "variance in engine temperature",
        "average fuel efficiency",
        "engine temperature stability",
        "maintenance cost per kilometer",
        "maintenance event frequency"
    ]
}