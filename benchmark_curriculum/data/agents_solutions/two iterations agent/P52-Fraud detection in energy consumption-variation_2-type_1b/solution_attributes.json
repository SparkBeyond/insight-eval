{
    "solved_by": "two iterations agent",
    "enriched_column_names": [
        "billing_dayofweek",
        "billing_month",
        "billing_season",
        "num_devices"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.015777989529424233": {
            "name": "billing_dayofweek",
            "code": "import pandas as pd\n\ndef billing_dayofweek(row):\n    return pd.to_datetime(row['billing_date']).dayofweek\n"
        },
        "0.003994946131505575": {
            "name": "billing_month",
            "code": "import pandas as pd\n\ndef billing_month(row):\n    return pd.to_datetime(row['billing_date']).month\n"
        },
        "-0.00040059981879148054": {
            "name": "billing_season",
            "code": "import pandas as pd\n\ndef billing_season(row):\n    month = pd.to_datetime(row['billing_date']).month\n    if month in [12, 1, 2]:\n        return 'Winter'\n    elif month in [3, 4, 5]:\n        return 'Spring'\n    elif month in [6, 7, 8]:\n        return 'Summer'\n    else:\n        return 'Fall'\n"
        },
        "0": {
            "name": "num_devices",
            "code": "\n\ndef num_devices(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    consumer_id = row['consumer_id']\n    devices = aux_dataframes['energy_device_data_table.csv']\n    return devices[devices['consumer_id'] == consumer_id].shape[0]\n"
        }
    },
    "feature_descriptions": [
        "billing dayofweek",
        "billing month",
        "billing season",
        "num devices"
    ]
}