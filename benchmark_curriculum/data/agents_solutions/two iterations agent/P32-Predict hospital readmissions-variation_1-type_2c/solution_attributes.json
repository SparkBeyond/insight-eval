{
    "solved_by": "two iterations agent",
    "enriched_column_names": [
        "adherence_rate",
        "total_doses_missed",
        "avg_treatment_intensity",
        "icu_stay_count",
        "prescription_frequency",
        "total_treatments_received",
        "diagnosis_count",
        "treatment_outcome_success_rate",
        "patient_gender",
        "smoking_status",
        "prescription_month",
        "average_stay_duration",
        "patient_age",
        "avg_treatment_duration",
        "time_since_last_admission",
        "patient_bmi",
        "most_frequent_admission_department",
        "last_admission_department"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.20465275982510167": {
            "name": "adherence_rate",
            "code": "\n\ndef adherence_rate(row):\n    \"\"\"\n    Extracts the medication adherence rate from the row.\n    \"\"\"\n    return row.get('adherence_rate', 0)\n"
        },
        "0.17159582265769566": {
            "name": "total_doses_missed",
            "code": "\n\ndef total_doses_missed(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Computes the total number of doses missed by the patient.\n    \"\"\"\n    patient_id = row['patient_id']\n    \n    # Check if 'treatment_table' exists in aux_dataframes\n    if 'treatment_table.csv' not in aux_dataframes:\n        raise KeyError(\"'treatment_table.csv' is missing from aux_dataframes.\")\n    \n    treatment_table = aux_dataframes['treatment_table.csv']\n    \n    # Ensure the required columns exist in the treatment_table\n    required_columns = {'patient_id', 'treatment_type', 'treatment_intensity'}\n    if not required_columns.issubset(treatment_table.columns):\n        raise KeyError(f\"treatment_table is missing one or more required columns: {required_columns}\")\n    \n    # Filter the treatment_table for the given patient_id\n    patient_treatments = treatment_table[treatment_table['patient_id'] == patient_id]\n    \n    # Calculate the total missed doses (if applicable)\n    # Assuming 'treatment_intensity' represents the total prescribed doses\n    # and 'adherence_rate' is available in the main DataFrame\n    if 'adherence_rate' in row and 'total_prescribed_doses' in row:\n        missed_doses = row['total_prescribed_doses'] * (1 - row['adherence_rate'])\n    else:\n        missed_doses = 0  # Default to 0 if adherence_rate or total_prescribed_doses is missing\n    \n    return missed_doses\n"
        },
        "0.14533257851116763": {
            "name": "avg_treatment_intensity",
            "code": "import pandas as pd\n\ndef avg_treatment_intensity(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Calculates the average intensity of treatments for the patient.\n    \"\"\"\n    # Ensure the 'treatment_table' key exists in aux_dataframes\n    if 'treatment_table.csv' not in aux_dataframes:\n        raise KeyError(\"'treatment_table.csv' is missing from aux_dataframes.\")\n    \n    # Retrieve the treatment_table DataFrame\n    treatment_table = aux_dataframes['treatment_table.csv']\n    \n    # Ensure the required columns exist in the treatment_table\n    required_columns = {'patient_id', 'treatment_intensity'}\n    if not required_columns.issubset(treatment_table.columns):\n        raise KeyError(f\"Missing required columns in treatment_table: {required_columns - set(treatment_table.columns)}\")\n    \n    # Extract the patient_id from the row\n    patient_id = row['patient_id']\n    \n    # Calculate the average treatment intensity for the patient\n    avg_intensity = treatment_table.loc[treatment_table['patient_id'] == patient_id, 'treatment_intensity'].mean()\n    \n    # Return the average intensity, or 0 if no treatments are found\n    return avg_intensity if pd.notna(avg_intensity) else 0\n"
        },
        "0.09582175738970597": {
            "name": "icu_stay_count",
            "code": "\n\ndef icu_stay_count(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Counts the total ICU stays experienced by the patient.\n    \"\"\"\n    # Extract the patient_id from the row\n    patient_id = row['patient_id']\n    \n    # Ensure the key 'admission_table.csv' exists in aux_dataframes\n    if 'admission_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'admission_table.csv' is missing in aux_dataframes.\")\n    \n    # Get the admission_table DataFrame\n    admission_table = aux_dataframes['admission_table.csv']\n    \n    # Ensure the required columns exist in the admission_table\n    required_columns = {'patient_id', 'icu_stay'}\n    if not required_columns.issubset(admission_table.columns):\n        raise KeyError(f\"The admission_table is missing one or more required columns: {required_columns}\")\n    \n    # Count the number of ICU stays for the given patient_id\n    icu_count = admission_table[(admission_table['patient_id'] == patient_id) & (admission_table['icu_stay'] == 1)].shape[0]\n    \n    return icu_count\n"
        },
        "0.07908254420058587": {
            "name": "prescription_frequency",
            "code": "\n\ndef prescription_frequency(row, df_train: pd.DataFrame):\n    \"\"\"\n    Calculates the frequency of prescriptions for the patient.\n    \"\"\"\n    patient_id = row['patient_id']\n    prescriptions_count = df_train[df_train['patient_id'] == patient_id].shape[0]\n    return prescriptions_count\n"
        },
        "0.06678554975334622": {
            "name": "total_treatments_received",
            "code": "\n\ndef total_treatments_received(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Counts the total number of treatments received by the patient.\n    \"\"\"\n    # Ensure the 'treatment_table' key exists in aux_dataframes\n    if 'treatment_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'treatment_table.csv' is missing from aux_dataframes.\")\n    \n    # Extract the treatment_table DataFrame\n    treatment_table = aux_dataframes['treatment_table.csv']\n    \n    # Ensure the required columns exist in the treatment_table\n    required_columns = {'patient_id'}\n    if not required_columns.issubset(treatment_table.columns):\n        raise ValueError(f\"The treatment_table is missing required columns: {required_columns - set(treatment_table.columns)}\")\n    \n    # Get the patient_id from the row\n    patient_id = row['patient_id']\n    \n    # Count the total treatments for the given patient_id\n    total_treatments = treatment_table[treatment_table['patient_id'] == patient_id].shape[0]\n    \n    return total_treatments\n"
        },
        "0.06376359650269162": {
            "name": "diagnosis_count",
            "code": "\n\ndef diagnosis_count(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Calculates the number of diagnoses associated with all of the patient's admissions.\n    \"\"\"\n    patient_id = row['patient_id']\n    # Access the correct key for the admission table\n    admission_table = aux_dataframes.get('admission_table.csv')\n    \n    # Check if the admission_table exists and is not None\n    if admission_table is not None:\n        # Filter admissions for the given patient_id\n        patient_admissions = admission_table[admission_table['patient_id'] == patient_id]\n        \n        # Count the number of non-null diagnosis codes for the patient's admissions\n        if not patient_admissions.empty:\n            total_diagnoses = patient_admissions['diagnosis_code'].notnull().sum()\n            return total_diagnoses\n        else:\n            return 0\n    else:\n        # If the admission_table is missing, raise an error or return 0\n        raise KeyError(\"The key 'admission_table.csv' is missing in aux_dataframes.\")\n"
        },
        "0.06075182451750864": {
            "name": "treatment_outcome_success_rate",
            "code": "\n\ndef treatment_outcome_success_rate(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Calculates the success rate of treatments for the patient.\n    \"\"\"\n    # Ensure the key 'treatment_table' exists in aux_dataframes\n    if 'treatment_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'treatment_table.csv' is missing from aux_dataframes.\")\n    \n    # Extract the treatment_table dataframe\n    treatment_table = aux_dataframes['treatment_table.csv']\n    \n    # Ensure the required columns exist in the treatment_table dataframe\n    required_columns = {'patient_id', 'treatment_outcome'}\n    if not required_columns.issubset(treatment_table.columns):\n        raise KeyError(f\"The treatment_table is missing one or more required columns: {required_columns}\")\n    \n    # Get the patient_id from the row\n    patient_id = row['patient_id']\n    \n    # Filter treatments for the given patient_id\n    treatments = treatment_table[treatment_table['patient_id'] == patient_id]\n    \n    # Calculate the success rate\n    if not treatments.empty:\n        successful_treatments = treatments[treatments['treatment_outcome'] == 'Successful']\n        success_rate = successful_treatments.shape[0] / treatments.shape[0]\n    else:\n        success_rate = 0  # No treatments found for the patient\n    \n    return success_rate\n"
        },
        "0.031503251683228865": {
            "name": "patient_gender",
            "code": "\n\ndef patient_gender(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Extracts the gender of the patient.\n    \"\"\"\n    # Ensure the key 'patient_table.csv' exists in aux_dataframes\n    if 'patient_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'patient_table.csv' is missing from aux_dataframes.\")\n    \n    # Get the patient_table dataframe\n    patient_table = aux_dataframes['patient_table.csv']\n    \n    # Ensure the required columns exist in the patient_table\n    required_columns = {'patient_id', 'gender'}\n    if not required_columns.issubset(patient_table.columns):\n        raise ValueError(f\"The patient_table is missing one or more required columns: {required_columns}\")\n    \n    # Extract the patient_id from the row\n    patient_id = row['patient_id']\n    \n    # Filter the patient_table for the given patient_id\n    patient_data = patient_table[patient_table['patient_id'] == patient_id]\n    \n    # Handle the case where the patient_id is not found\n    if patient_data.empty:\n        raise ValueError(f\"Patient ID {patient_id} not found in patient_table.\")\n    \n    # Extract the gender and return the corresponding value\n    gender = patient_data['gender'].values[0]\n    return 1 if gender.lower() == 'male' else 0\n"
        },
        "0.021696670437568837": {
            "name": "smoking_status",
            "code": "\n\ndef smoking_status(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Encodes the smoking status of the patient.\n    0 = Never, 1 = Former, 2 = Current\n    If the smoking status is not found or invalid, return -1.\n    \"\"\"\n    # Ensure 'patient_table' exists in aux_dataframes\n    if 'patient_table.csv' not in aux_dataframes:\n        raise KeyError(\"'patient_table.csv' is missing from aux_dataframes\")\n\n    # Extract the patient_id from the row\n    patient_id = row['patient_id']\n\n    # Get the patient_table DataFrame\n    patient_table = aux_dataframes['patient_table.csv']\n\n    # Ensure the patient_id exists in the patient_table\n    if 'patient_id' not in patient_table.columns:\n        raise KeyError(\"'patient_id' column is missing in patient_table\")\n\n    # Filter the patient_table for the given patient_id\n    patient_data = patient_table.loc[patient_table['patient_id'] == patient_id]\n\n    # If no matching patient_id is found, return -1\n    if patient_data.empty:\n        return -1\n\n    # Extract the smoking_status for the patient\n    smoking_status = patient_data['smoking_status'].values[0]\n\n    # Define the mapping for smoking status\n    mapping = {'Never': 0, 'Former': 1, 'Current': 2}\n\n    # Return the encoded smoking status, or -1 if not found in the mapping\n    return mapping.get(smoking_status, -1)\n"
        },
        "0.016601937694492863": {
            "name": "prescription_month",
            "code": "import pandas as pd\n\ndef prescription_month(row):\n    \"\"\"\n    Extracts the month of the prescription from the prescription_date provided.\n    \"\"\"\n    prescription_date = pd.to_datetime(row['prescription_date'])\n    return prescription_date.month\n"
        },
        "0.015326749620302015": {
            "name": "average_stay_duration",
            "code": "import pandas as pd\n\ndef average_stay_duration(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Calculates the average duration of hospital stays for the patient.\n    \"\"\"\n    patient_id = row['patient_id']\n    \n    # Ensure the key exists in the aux_dataframes dictionary\n    if 'admission_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'admission_table.csv' is not found in aux_dataframes.\")\n    \n    admission_table = aux_dataframes['admission_table.csv']\n    \n    # Ensure the required columns exist in the admission_table\n    required_columns = {'patient_id', 'admission_date', 'discharge_date'}\n    if not required_columns.issubset(admission_table.columns):\n        raise ValueError(f\"The admission_table is missing one or more required columns: {required_columns}\")\n    \n    # Filter rows for the given patient_id\n    stays = admission_table[admission_table['patient_id'] == patient_id]\n    \n    # Calculate stay duration for each admission\n    if not stays.empty:\n        stays['admission_date'] = pd.to_datetime(stays['admission_date'])\n        stays['discharge_date'] = pd.to_datetime(stays['discharge_date'])\n        stays['stay_duration'] = (stays['discharge_date'] - stays['admission_date']).dt.days\n        avg_duration = stays['stay_duration'].mean()\n    else:\n        avg_duration = 0\n    \n    return avg_duration\n"
        },
        "0.012944949407595168": {
            "name": "patient_age",
            "code": "import pandas as pd\n\ndef patient_age(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Calculates the age of the patient based on their age in the patient table and the prescription date.\n    \"\"\"\n    # Check if 'patient_table.csv' exists in aux_dataframes\n    if 'patient_table.csv' not in aux_dataframes:\n        raise KeyError(\"'patient_table.csv' is missing from aux_dataframes\")\n\n    # Extract the patient table\n    patient_table = aux_dataframes['patient_table.csv']\n\n    # Ensure the required columns exist in the patient table\n    if 'patient_id' not in patient_table.columns or 'age' not in patient_table.columns:\n        raise KeyError(\"Required columns ('patient_id', 'age') are missing from 'patient_table.csv'\")\n\n    # Get the patient_id from the row\n    patient_id = row['patient_id']\n\n    # Ensure the patient exists in the patient table\n    if patient_id not in patient_table['patient_id'].values:\n        raise ValueError(f\"Patient ID {patient_id} not found in 'patient_table.csv'\")\n\n    # Get the age of the patient from the patient table\n    patient_age_in_years = patient_table.loc[patient_table['patient_id'] == patient_id, 'age'].values[0]\n\n    # Get the reference date (prescription date) from the row\n    reference_date = pd.to_datetime(row['prescription_date'])\n\n    # Calculate the approximate birth date of the patient\n    birth_date = reference_date - pd.DateOffset(years=patient_age_in_years)\n\n    # Calculate the age based on the reference date and the approximated birth date\n    age = (reference_date - birth_date).days // 365\n\n    return age\n"
        },
        "0.012753692132151525": {
            "name": "avg_treatment_duration",
            "code": "import pandas as pd\n\ndef avg_treatment_duration(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Computes the average treatment duration (in days) for the patient.\n    \"\"\"\n    patient_id = row['patient_id']\n    \n    # Ensure the key 'treatment_table.csv' exists in aux_dataframes\n    if 'treatment_table.csv' not in aux_dataframes:\n        raise KeyError(\"'treatment_table.csv' not found in aux_dataframes\")\n    \n    treatment_table = aux_dataframes['treatment_table.csv']\n    \n    # Ensure the required columns exist in the treatment_table\n    required_columns = {'admission_id', 'treatment_date'}\n    if not required_columns.issubset(treatment_table.columns):\n        raise KeyError(f\"Missing required columns in treatment_table: {required_columns - set(treatment_table.columns)}\")\n    \n    # Filter treatments for the given patient_id\n    treatments = treatment_table[treatment_table['patient_id'] == patient_id]\n    \n    if not treatments.empty:\n        # Join with admission_table to calculate treatment duration\n        if 'admission_table.csv' not in aux_dataframes:\n            raise KeyError(\"'admission_table.csv' not found in aux_dataframes\")\n        \n        admission_table = aux_dataframes['admission_table.csv']\n        \n        # Ensure the required columns exist in the admission_table\n        required_admission_columns = {'admission_id', 'admission_date', 'discharge_date'}\n        if not required_admission_columns.issubset(admission_table.columns):\n            raise KeyError(f\"Missing required columns in admission_table: {required_admission_columns - set(admission_table.columns)}\")\n        \n        # Merge treatment_table with admission_table to get admission and discharge dates\n        merged_data = treatments.merge(admission_table, on='admission_id', how='left')\n        \n        # Calculate treatment duration as the difference between discharge_date and admission_date\n        merged_data['admission_date'] = pd.to_datetime(merged_data['admission_date'])\n        merged_data['discharge_date'] = pd.to_datetime(merged_data['discharge_date'])\n        merged_data['treatment_duration'] = (merged_data['discharge_date'] - merged_data['admission_date']).dt.days\n        \n        # Compute the average treatment duration\n        avg_duration = merged_data['treatment_duration'].mean()\n        return avg_duration\n    else:\n        return 0.0\n"
        },
        "0.008144979005026316": {
            "name": "time_since_last_admission",
            "code": "import pandas as pd\n\ndef time_since_last_admission(row, df_train: pd.DataFrame, aux_data: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Calculates the number of days since the patient's last recorded admission.\n    \"\"\"\n    # Extract the relevant dataframe from aux_data\n    admission_table = aux_data['admission_table.csv']\n    \n    # Ensure the admission_date column is in datetime format\n    admission_table['admission_date'] = pd.to_datetime(admission_table['admission_date'])\n    \n    # Extract patient_id and current date from the row\n    patient_id = row['patient_id']\n    current_date = pd.to_datetime(row['prescription_date'])  # Use 'prescription_date' from the input dataframe\n    \n    # Filter the admission_table for the given patient_id\n    previous_admissions = admission_table[admission_table['patient_id'] == patient_id]\n    \n    if not previous_admissions.empty:\n        # Find the most recent admission date before the current date\n        last_admission_date = previous_admissions[previous_admissions['admission_date'] < current_date]['admission_date'].max()\n        \n        if pd.notnull(last_admission_date):\n            # Calculate the number of days since the last admission\n            days_since = (current_date - last_admission_date).days\n            return days_since\n        else:\n            # No admission before the current date\n            return -1\n    else:\n        # No admissions for this patient\n        return -1\n"
        },
        "0.0038177883311320076": {
            "name": "patient_bmi",
            "code": "\n\ndef patient_bmi(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Calculates the Body Mass Index (BMI) of the patient.\n    \"\"\"\n    # Ensure the key 'patient_table' exists in aux_dataframes\n    if 'patient_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'patient_table.csv' is missing from aux_dataframes.\")\n    \n    # Get the patient table dataframe\n    patient_table = aux_dataframes['patient_table.csv']\n    \n    # Extract the patient_id from the row\n    patient_id = row['patient_id']\n    \n    # Check if the patient_id exists in the patient_table\n    patient_data = patient_table.loc[patient_table['patient_id'] == patient_id]\n    if patient_data.empty:\n        raise ValueError(f\"Patient ID {patient_id} not found in patient_table.\")\n    \n    # Extract weight and height\n    weight = patient_data['weight'].values[0]\n    height = patient_data['height'].values[0]\n    \n    # Ensure weight and height are valid numbers\n    if weight <= 0 or height <= 0:\n        raise ValueError(f\"Invalid weight ({weight}) or height ({height}) for patient ID {patient_id}.\")\n    \n    # Calculate BMI\n    bmi = weight / (height / 100) ** 2\n    return bmi\n"
        },
        "0.0017982485604991494": {
            "name": "most_frequent_admission_department",
            "code": "\n\ndef most_frequent_admission_department(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Finds the department where the patient was most frequently admitted.\n    \"\"\"\n    # Ensure the key 'admission_table.csv' exists in aux_dataframes\n    if 'admission_table.csv' not in aux_dataframes:\n        raise KeyError(\"The key 'admission_table.csv' is missing from aux_dataframes.\")\n    \n    # Extract the admission_table dataframe\n    admission_table = aux_dataframes['admission_table.csv']\n    \n    # Ensure the required columns exist in the admission_table\n    required_columns = {'admission_id', 'patient_id', 'admission_date', 'discharge_date', 'icu_stay', 'diagnosis_code'}\n    if not required_columns.issubset(admission_table.columns):\n        raise KeyError(f\"The admission_table is missing one or more required columns: {required_columns}\")\n    \n    # Check if the 'diagnosis_code' column is used as a proxy for department\n    if 'diagnosis_code' not in admission_table.columns:\n        raise KeyError(\"The 'diagnosis_code' column is missing from the admission_table.\")\n    \n    # Get the patient_id from the row\n    patient_id = row['patient_id']\n    \n    # Filter the admission_table for the given patient_id\n    admissions = admission_table[admission_table['patient_id'] == patient_id]\n    \n    # Check if there are any admissions for the patient\n    if not admissions.empty:\n        # Find the most frequent diagnosis_code (used as a proxy for department)\n        most_frequent_department = admissions['diagnosis_code'].mode().iloc[0]\n        return most_frequent_department\n    else:\n        # Return \"Unknown\" if no admissions are found\n        return \"Unknown\"\n"
        },
        "0": {
            "name": "last_admission_department",
            "code": "\n\ndef last_admission_department(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Retrieves the department of the patient's most recent admission.\n    If the department column is not available, returns \"Unknown\".\n    \"\"\"\n    # Ensure the key 'admission_table.csv' exists in aux_dataframes\n    if 'admission_table.csv' not in aux_dataframes:\n        return \"Unknown\"\n    \n    # Extract the patient_id from the row\n    patient_id = row['patient_id']\n    \n    # Get the admission_table dataframe\n    admission_table = aux_dataframes['admission_table.csv']\n    \n    # Check if the 'department' column exists in the admission_table\n    if 'department' not in admission_table.columns:\n        return \"Unknown\"\n    \n    # Filter the admissions for the given patient_id\n    patient_admissions = admission_table[admission_table['patient_id'] == patient_id]\n    \n    # If there are no admissions for the patient, return \"Unknown\"\n    if patient_admissions.empty:\n        return \"Unknown\"\n    \n    # Sort the admissions by 'admission_date' in descending order and get the most recent one\n    last_department = (\n        patient_admissions.sort_values(by='admission_date', ascending=False)\n        .iloc[0]['department']\n    )\n    \n    return last_department\n"
        }
    },
    "feature_descriptions": [
        "adherence rate",
        "total doses missed",
        "avg treatment intensity",
        "icu stay count",
        "prescription frequency",
        "total treatments received",
        "diagnosis count",
        "treatment outcome success rate",
        "patient gender",
        "smoking status",
        "prescription month",
        "average stay duration",
        "patient age",
        "avg treatment duration",
        "time since last admission",
        "patient bmi",
        "most frequent admission department",
        "last admission department"
    ]
}