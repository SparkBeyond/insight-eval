{
    "solved_by": "two iterations agent",
    "enriched_column_names": [
        "total_loans_customer",
        "avg_repayment_time_customer",
        "payment_to_loan_ratio",
        "loan_age",
        "avg_loan_amount_customer",
        "customer_financial_health",
        "payment_frequency_success",
        "payment_delay_trend",
        "ratio_successful_repayments",
        "avg_payment_amount",
        "loan_payment_reliability",
        "total_payments",
        "num_late_payments"
    ],
    "solution_type": "SolutionType.FeatureEngineering",
    "new_feature_functions": [],
    "sorted_feature_functions": {
        "0.342821167505498": {
            "name": "total_loans_customer",
            "code": "\n\ndef total_loans_customer(row: pd.Series, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    \"\"\"\n    Calculate the total number of loans for a given customer based on the customer_id in the row.\n\n    Args:\n        row (pd.Series): A row from a DataFrame, expected to contain a 'loan_id' column.\n        df_train (pd.DataFrame): The main training DataFrame (not used in this function but kept for compatibility).\n        aux_dataframes (Dict[str, pd.DataFrame]): A dictionary of auxiliary DataFrames, including 'loan_table.csv'.\n\n    Returns:\n        int: The total number of loans for the customer.\n    \"\"\"\n    # Ensure the key 'loan_table.csv' exists in aux_dataframes\n    if \"loan_table.csv\" not in aux_dataframes:\n        raise KeyError(\"The key 'loan_table.csv' is missing from aux_dataframes.\")\n    \n    # Access the loan_table dataframe\n    loan_df = aux_dataframes[\"loan_table.csv\"]\n    \n    # Ensure the required columns exist in the loan_table dataframe\n    required_columns = {\"customer_id\", \"loan_id\"}\n    if not required_columns.issubset(loan_df.columns):\n        raise KeyError(f\"The loan_table.csv is missing one or more required columns: {required_columns}\")\n    \n    # Ensure the row contains the 'loan_id' column\n    if \"loan_id\" not in row.index:\n        raise KeyError(\"The row is missing the 'loan_id' column.\")\n    \n    # Extract the loan_id from the row\n    loan_id = row[\"loan_id\"]\n    \n    # Find the customer_id associated with the loan_id\n    if loan_id not in loan_df[\"loan_id\"].values:\n        raise ValueError(f\"The loan_id '{loan_id}' is not found in the loan_table.csv.\")\n    \n    customer_id = loan_df.loc[loan_df[\"loan_id\"] == loan_id, \"customer_id\"].values[0]\n    \n    # Filter loans for the given customer_id\n    customer_loans = loan_df[loan_df[\"customer_id\"] == customer_id]\n    \n    # Return the total number of loans for the customer\n    return customer_loans.shape[0]\n"
        },
        "0.14104025598790276": {
            "name": "avg_repayment_time_customer",
            "code": "import pandas as pd\n\ndef avg_repayment_time_customer(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key exists in aux_dataframes\n    if \"loan_table.csv\" not in aux_dataframes:\n        raise KeyError(\"'loan_table.csv' not found in aux_dataframes\")\n    \n    # Get the loan_table dataframe\n    loan_df = aux_dataframes[\"loan_table.csv\"]\n    \n    # Ensure the necessary columns exist in the loan_table dataframe\n    required_loan_columns = {\"customer_id\", \"loan_issue_date\", \"loan_id\"}\n    if not required_loan_columns.issubset(loan_df.columns):\n        raise KeyError(f\"Required columns {required_loan_columns} are missing in loan_table.csv\")\n    \n    # Ensure the necessary columns exist in the row dataframe\n    required_row_columns = {\"repayment_date\", \"loan_id\"}\n    if not required_row_columns.issubset(row.index):\n        raise KeyError(f\"Required columns {required_row_columns} are missing in the input row\")\n    \n    # Get the customer_id for the current row by joining with loan_table\n    if \"customer_id\" not in row:\n        # Merge loan_table with the current row's loan_id to get the customer_id\n        loan_id = row[\"loan_id\"]\n        customer_id_row = loan_df[loan_df[\"loan_id\"] == loan_id]\n        if customer_id_row.empty:\n            raise ValueError(f\"No matching customer_id found for loan_id: {loan_id}\")\n        customer_id = customer_id_row.iloc[0][\"customer_id\"]\n    else:\n        customer_id = row[\"customer_id\"]\n    \n    # Merge the loan_table with the df_train to get repayment_date\n    loan_with_repayment = loan_df.merge(\n        df_train[['loan_id', 'repayment_date']], \n        on='loan_id', \n        how='inner'\n    )\n    \n    # Filter loans for the given customer_id\n    customer_loans = loan_with_repayment[loan_with_repayment[\"customer_id\"] == customer_id]\n    \n    # Ensure there are loans for the customer\n    if customer_loans.empty:\n        return None  # Return None if no loans are found for the customer\n    \n    # Calculate repayment time for each loan (difference between repayment_date and loan_issue_date)\n    customer_loans[\"repayment_time\"] = (\n        pd.to_datetime(customer_loans[\"repayment_date\"]) - pd.to_datetime(customer_loans[\"loan_issue_date\"])\n    ).dt.days\n    \n    # Return the average repayment time\n    return customer_loans[\"repayment_time\"].mean()\n"
        },
        "0.09765276245304154": {
            "name": "payment_to_loan_ratio",
            "code": "\n\ndef payment_to_loan_ratio(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'payment_table.csv' exists in aux_dataframes\n    if \"payment_table.csv\" not in aux_dataframes:\n        raise KeyError(\"The key 'payment_table.csv' is missing in aux_dataframes.\")\n    \n    # Ensure the key 'loan_table.csv' exists in aux_dataframes\n    if \"loan_table.csv\" not in aux_dataframes:\n        raise KeyError(\"The key 'loan_table.csv' is missing in aux_dataframes.\")\n    \n    # Access the payment_table and loan_table dataframes\n    payment_df = aux_dataframes[\"payment_table.csv\"]\n    loan_df = aux_dataframes[\"loan_table.csv\"]\n    \n    # Ensure the required columns exist in the payment_table dataframe\n    required_payment_columns = {\"loan_id\", \"payment_amount\"}\n    if not required_payment_columns.issubset(payment_df.columns):\n        raise KeyError(f\"The payment_table.csv is missing one or more required columns: {required_payment_columns}\")\n    \n    # Ensure the required columns exist in the loan_table dataframe\n    required_loan_columns = {\"loan_id\", \"loan_amount\"}\n    if not required_loan_columns.issubset(loan_df.columns):\n        raise KeyError(f\"The loan_table.csv is missing one or more required columns: {required_loan_columns}\")\n    \n    # Retrieve the loan_amount for the given loan_id\n    loan_id = row[\"loan_id\"]\n    loan_row = loan_df[loan_df[\"loan_id\"] == loan_id]\n    \n    if loan_row.empty:\n        raise ValueError(f\"No matching loan_id found in loan_table.csv for loan_id: {loan_id}\")\n    \n    loan_amount = loan_row[\"loan_amount\"].iloc[0]\n    \n    # Filter payments for the given loan_id\n    loan_payments = payment_df[payment_df[\"loan_id\"] == loan_id]\n    \n    # Calculate the total payments\n    total_payments = loan_payments[\"payment_amount\"].sum()\n    \n    # Calculate and return the payment-to-loan ratio\n    return total_payments / loan_amount if loan_amount > 0 else 0\n"
        },
        "0.08556650383966448": {
            "name": "loan_age",
            "code": "import pandas as pd\n\ndef loan_age(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Access the loan_table dataframe from aux_dataframes\n    loan_table = aux_dataframes.get(\"loan_table.csv\")\n    \n    # Ensure the loan_table dataframe exists\n    if loan_table is None:\n        raise ValueError(\"loan_table.csv is missing in aux_dataframes\")\n    \n    # Get the loan_id from the current row\n    loan_id = row[\"loan_id\"]\n    \n    # Find the corresponding loan_issue_date for the loan_id\n    loan_row = loan_table[loan_table[\"loan_id\"] == loan_id]\n    \n    # Ensure the loan_id exists in the loan_table\n    if loan_row.empty:\n        raise ValueError(f\"loan_id {loan_id} not found in loan_table.csv\")\n    \n    # Extract the loan_issue_date\n    loan_date = pd.to_datetime(loan_row.iloc[0][\"loan_issue_date\"])\n    \n    # Calculate the loan age in days\n    current_date = pd.to_datetime(\"today\")\n    return (current_date - loan_date).days\n"
        },
        "0.046899386047034884": {
            "name": "avg_loan_amount_customer",
            "code": "\n\ndef avg_loan_amount_customer(row: pd.Series, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'loan_table.csv' exists in aux_dataframes\n    if \"loan_table.csv\" not in aux_dataframes:\n        raise KeyError(\"The key 'loan_table.csv' is missing from aux_dataframes.\")\n    \n    # Get the loan_table dataframe\n    loan_df = aux_dataframes[\"loan_table.csv\"]\n    \n    # Ensure the required columns exist in the loan_table dataframe\n    required_columns = {\"customer_id\", \"loan_id\", \"loan_amount\"}\n    if not required_columns.issubset(loan_df.columns):\n        raise KeyError(f\"The loan_table.csv dataframe is missing one or more required columns: {required_columns}\")\n    \n    # Ensure the row contains the 'loan_id' column\n    if \"loan_id\" not in row:\n        raise KeyError(\"The row does not contain the 'loan_id' column.\")\n    \n    # Get the loan_id from the row\n    loan_id = row[\"loan_id\"]\n    \n    # Map the loan_id to the corresponding customer_id using the loan_table dataframe\n    loan_row = loan_df[loan_df[\"loan_id\"] == loan_id]\n    if loan_row.empty:\n        raise ValueError(f\"No matching loan_id found in loan_table.csv for loan_id: {loan_id}\")\n    \n    customer_id = loan_row.iloc[0][\"customer_id\"]\n    \n    # Filter loans for the given customer_id\n    customer_loans = loan_df[loan_df[\"customer_id\"] == customer_id]\n    \n    # Calculate and return the average loan amount, or 0 if no loans exist\n    return customer_loans[\"loan_amount\"].mean() if not customer_loans.empty else 0\n"
        },
        "0.04392969708377611": {
            "name": "customer_financial_health",
            "code": "import pandas as pd\n\ndef customer_financial_health(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    import pandas as pd\n\n    # Access auxiliary datasets\n    if \"loan_table.csv\" not in aux_dataframes or \"payment_table.csv\" not in aux_dataframes:\n        raise KeyError(\"Required auxiliary dataframes ('loan_table.csv' or 'payment_table.csv') are missing.\")\n    \n    loan_df = aux_dataframes[\"loan_table.csv\"]\n    payment_df = aux_dataframes[\"payment_table.csv\"]\n\n    # Ensure required columns exist in the dataframes\n    required_loan_columns = {\"customer_id\", \"loan_id\", \"loan_amount\"}\n    required_payment_columns = {\"loan_id\", \"payment_amount\", \"payment_date\"}\n    if not required_loan_columns.issubset(loan_df.columns):\n        raise KeyError(f\"Loan table is missing required columns: {required_loan_columns - set(loan_df.columns)}\")\n    if not required_payment_columns.issubset(payment_df.columns):\n        raise KeyError(f\"Payment table is missing required columns: {required_payment_columns - set(payment_df.columns)}\")\n\n    # Retrieve the customer_id for the given loan_id in the row\n    loan_id = row[\"loan_id\"]\n    if loan_id not in loan_df[\"loan_id\"].values:\n        raise ValueError(f\"Loan ID {loan_id} not found in loan_table.csv.\")\n    \n    customer_id = loan_df.loc[loan_df[\"loan_id\"] == loan_id, \"customer_id\"].values[0]\n\n    # Fetch all relevant data for this customer\n    customer_loans = loan_df[loan_df[\"customer_id\"] == customer_id]\n    customer_payments = payment_df.merge(loan_df[[\"loan_id\", \"customer_id\"]], on=\"loan_id\", how=\"left\")\n    customer_payments = customer_payments[customer_payments[\"customer_id\"] == customer_id]\n\n    # If no recorded loans or payments, return a default value\n    if customer_loans.empty or customer_payments.empty:\n        return 0\n\n    # Compute average loan amount\n    avg_loan_amt = customer_loans[\"loan_amount\"].mean()\n\n    # Compute payment-to-loan ratio\n    total_payments = customer_payments[\"payment_amount\"].sum()\n    total_loan_amount = customer_loans[\"loan_amount\"].sum()\n    payment_ratio = total_payments / total_loan_amount if total_loan_amount > 0 else 0\n\n    # Analyze payment delay trends\n    if \"delay_days\" in customer_payments.columns:\n        loan_payments = customer_payments.sort_values(by=\"payment_date\")\n        delays = loan_payments[\"delay_days\"].diff()\n        positive_delay_trend = (delays > 0).sum() > (delays < 0).sum()\n    else:\n        positive_delay_trend = 0  # Default to no delay trend if \"delay_days\" column is missing\n\n    # Combine all these factors into a \"financial health score\"\n    financial_health = avg_loan_amt * 0.4 + payment_ratio * 0.5 - positive_delay_trend * 0.1\n    return financial_health\n"
        },
        "0.043697420904147466": {
            "name": "payment_frequency_success",
            "code": "import pandas as pd\n\ndef payment_frequency_success(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the required keys exist in aux_dataframes\n    if \"payment_table.csv\" not in aux_dataframes or \"loan_table.csv\" not in aux_dataframes:\n        raise KeyError(\"Required tables ('payment_table.csv' or 'loan_table.csv') are missing in aux_dataframes.\")\n    \n    # Load the payment and loan tables\n    payment_df = aux_dataframes[\"payment_table.csv\"]\n    loan_df = aux_dataframes[\"loan_table.csv\"]\n    \n    # Ensure the required columns exist in the dataframes\n    required_payment_columns = {\"loan_id\", \"payment_date\"}\n    required_loan_columns = {\"loan_id\", \"customer_id\"}\n    \n    if not required_payment_columns.issubset(payment_df.columns):\n        raise KeyError(f\"Missing required columns in payment_table.csv: {required_payment_columns - set(payment_df.columns)}\")\n    if not required_loan_columns.issubset(loan_df.columns):\n        raise KeyError(f\"Missing required columns in loan_table.csv: {required_loan_columns - set(loan_df.columns)}\")\n    \n    # Get the loan_id from the row\n    loan_id = row[\"loan_id\"]\n    \n    # Get the customer_id associated with the loan_id\n    loan_data = loan_df[loan_df[\"loan_id\"] == loan_id]\n    if loan_data.empty:\n        raise ValueError(f\"No loan data found for loan_id: {loan_id}\")\n    \n    customer_id = loan_data.iloc[0][\"customer_id\"]\n    \n    # Calculate the customer's payment frequency (number of payments / loan duration in months)\n    customer_payment_data = payment_df[payment_df[\"loan_id\"] == loan_id]\n    if customer_payment_data.empty:\n        raise ValueError(f\"No payment data found for loan_id: {loan_id}\")\n    \n    # Convert payment_date to datetime to calculate frequency\n    customer_payment_data[\"payment_date\"] = pd.to_datetime(customer_payment_data[\"payment_date\"])\n    payment_frequency = customer_payment_data[\"payment_date\"].nunique()  # Number of unique payment dates\n    \n    # Calculate the loan repayment rate (total payment amount / loan amount)\n    loan_amount = loan_data.iloc[0][\"loan_amount\"]\n    if loan_amount == 0:\n        raise ValueError(f\"Loan amount is zero for loan_id: {loan_id}\")\n    \n    total_payment_amount = customer_payment_data[\"payment_amount\"].sum()\n    repayment_rate = total_payment_amount / loan_amount\n    \n    # Avoid division by zero by adding a small epsilon value\n    epsilon = 1e-5\n    return payment_frequency / (repayment_rate + epsilon)\n"
        },
        "0.02989598323501323": {
            "name": "payment_delay_trend",
            "code": "import pandas as pd\n\ndef payment_delay_trend(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'payment_table' exists in aux_dataframes\n    if \"payment_table.csv\" not in aux_dataframes:\n        raise KeyError(\"'payment_table.csv' not found in aux_dataframes\")\n    \n    # Load the payment table\n    payment_df = aux_dataframes[\"payment_table.csv\"]\n    \n    # Filter payments for the specific loan_id\n    loan_payments = payment_df[payment_df[\"loan_id\"] == row[\"loan_id\"]]\n    \n    # Ensure the dataframe is sorted by payment_date\n    loan_payments = loan_payments.sort_values(by=\"payment_date\")\n    \n    # Calculate delay days (assuming 'scheduled_repayment_date' is available in the row)\n    loan_payments[\"delay_days\"] = (pd.to_datetime(loan_payments[\"payment_date\"]) - \n                                   pd.to_datetime(row[\"scheduled_repayment_date\"])).dt.days\n    \n    # Calculate the difference in delay days\n    delays = loan_payments[\"delay_days\"].diff()\n    \n    # Return 1 if the number of increasing delays is greater than decreasing delays, otherwise 0\n    return int((delays > 0).sum() > (delays < 0).sum())\n"
        },
        "0.02881187866804174": {
            "name": "ratio_successful_repayments",
            "code": "\n\ndef ratio_successful_repayments(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Check if 'payment_table.csv' and 'loan_table.csv' exist in aux_dataframes\n    if \"payment_table.csv\" not in aux_dataframes or \"loan_table.csv\" not in aux_dataframes:\n        raise KeyError(\"'payment_table.csv' or 'loan_table.csv' is missing from aux_dataframes\")\n    \n    # Load the payment and loan tables\n    payment_df = aux_dataframes[\"payment_table.csv\"]\n    loan_df = aux_dataframes[\"loan_table.csv\"]\n    \n    # Ensure the required columns exist in the payment and loan tables\n    required_payment_columns = {\"loan_id\", \"payment_status\"}\n    required_loan_columns = {\"loan_id\", \"customer_id\"}\n    \n    if not required_payment_columns.issubset(payment_df.columns):\n        raise KeyError(f\"The payment table is missing one or more required columns: {required_payment_columns}\")\n    if not required_loan_columns.issubset(loan_df.columns):\n        raise KeyError(f\"The loan table is missing one or more required columns: {required_loan_columns}\")\n    \n    # Get the customer_id for the given loan_id in the row\n    loan_id = row[\"loan_id\"]\n    if loan_id not in loan_df[\"loan_id\"].values:\n        raise KeyError(f\"Loan ID {loan_id} not found in loan_table.csv\")\n    \n    customer_id = loan_df.loc[loan_df[\"loan_id\"] == loan_id, \"customer_id\"].values[0]\n    \n    # Merge payment_df with loan_df to get the customer_id in the payment data\n    payment_df = payment_df.merge(loan_df[[\"loan_id\", \"customer_id\"]], on=\"loan_id\", how=\"left\")\n    \n    # Filter payments for the specific customer\n    customer_payments = payment_df[payment_df[\"customer_id\"] == customer_id]\n    \n    # Calculate total loans and successful loans\n    total_loans = customer_payments.shape[0]\n    successful_loans = customer_payments[customer_payments[\"payment_status\"] == \"Successful\"].shape[0]\n    \n    # Return the ratio of successful loans to total loans\n    return successful_loans / total_loans if total_loans > 0 else 0\n"
        },
        "0.028103281377695282": {
            "name": "avg_payment_amount",
            "code": "\n\ndef avg_payment_amount(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> float:\n    \"\"\"\n    Calculate the average payment amount for a given loan_id in the row.\n\n    Args:\n        row (pd.Series): A row from a DataFrame containing a 'loan_id' column.\n        aux_dataframes (Dict[str, pd.DataFrame]): A dictionary of auxiliary DataFrames, \n                                                  including 'payment_table'.\n\n    Returns:\n        float: The average payment amount for the given loan_id. Returns 0 if no payments exist.\n    \"\"\"\n    # Check if 'payment_table' exists in aux_dataframes\n    if \"payment_table.csv\" not in aux_dataframes:\n        raise KeyError(\"'payment_table.csv' is missing from aux_dataframes\")\n    \n    # Get the payment_table DataFrame\n    payment_df = aux_dataframes[\"payment_table.csv\"]\n    \n    # Ensure the required columns exist in the payment_table\n    required_columns = {\"loan_id\", \"payment_amount\"}\n    if not required_columns.issubset(payment_df.columns):\n        raise KeyError(f\"The payment_table is missing one or more required columns: {required_columns}\")\n    \n    # Ensure the row contains the 'loan_id' column\n    if \"loan_id\" not in row:\n        raise KeyError(\"'loan_id' is missing from the input row\")\n    \n    # Filter the payment_table for rows matching the loan_id in the current row\n    loan_id = row[\"loan_id\"]\n    loan_payments = payment_df[payment_df[\"loan_id\"] == loan_id]\n    \n    # Calculate and return the mean payment amount, handling the case where no payments exist\n    if loan_payments.empty:\n        return 0.0  # Return 0 if there are no payments for the given loan_id\n    return loan_payments[\"payment_amount\"].mean()\n"
        },
        "0.016414547529962853": {
            "name": "loan_payment_reliability",
            "code": "\n\ndef loan_payment_reliability(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the auxiliary dataframes contain the required keys\n    if \"payment_table.csv\" not in aux_dataframes or \"loan_table.csv\" not in aux_dataframes:\n        raise KeyError(\"Required keys 'payment_table.csv' or 'loan_table.csv' are missing in aux_dataframes.\")\n    \n    # Access auxiliary datasets\n    payment_df = aux_dataframes[\"payment_table.csv\"]\n    loan_df = aux_dataframes[\"loan_table.csv\"]\n\n    # Validate that the required columns exist in the dataframes\n    required_payment_columns = {\"loan_id\", \"payment_amount\"}\n    required_loan_columns = {\"loan_id\", \"customer_id\", \"loan_amount\"}\n    \n    if not required_payment_columns.issubset(payment_df.columns):\n        raise KeyError(f\"Missing required columns in payment_table.csv: {required_payment_columns - set(payment_df.columns)}\")\n    if not required_loan_columns.issubset(loan_df.columns):\n        raise KeyError(f\"Missing required columns in loan_table.csv: {required_loan_columns - set(loan_df.columns)}\")\n\n    # Retrieve the customer_id for the given loan_id in the row\n    loan_id = row[\"loan_id\"]\n    loan_row = loan_df[loan_df[\"loan_id\"] == loan_id]\n    if loan_row.empty:\n        # If the loan_id is not found in the loan_table, return 0\n        return 0\n\n    customer_id = loan_row.iloc[0][\"customer_id\"]\n\n    # Retrieve all loans for the customer\n    customer_loans = loan_df[loan_df[\"customer_id\"] == customer_id]\n    if customer_loans.empty:\n        return 0\n\n    # Compute total expected loan payments for the customer\n    total_loan_amount = customer_loans[\"loan_amount\"].sum()\n\n    # Retrieve all payments for this customer's loans\n    customer_payments = payment_df[payment_df[\"loan_id\"].isin(customer_loans[\"loan_id\"])]\n    total_payments = customer_payments[\"payment_amount\"].sum()\n\n    # Compute loan-payment reliability as a ratio\n    return total_payments / total_loan_amount if total_loan_amount > 0 else 0\n"
        },
        "0.009807408776250604": {
            "name": "total_payments",
            "code": "\n\ndef total_payments(row: pd.Series, aux_dataframes: Dict[str, pd.DataFrame]) -> float:\n    \"\"\"\n    Calculate the total payments for a given loan_id from the payment_table.\n\n    Args:\n        row (pd.Series): A row from a DataFrame containing a 'loan_id' column.\n        aux_dataframes (Dict[str, pd.DataFrame]): A dictionary where keys are filenames and values are DataFrames.\n            Expected to contain a DataFrame with key 'payment_table.csv' and columns ['loan_id', 'payment_amount'].\n\n    Returns:\n        float: The total payment amount for the given loan_id.\n    \"\"\"\n    # Check if 'payment_table.csv' exists in aux_dataframes\n    if \"payment_table.csv\" not in aux_dataframes:\n        raise KeyError(\"'payment_table.csv' is missing from aux_dataframes.\")\n    \n    payment_df = aux_dataframes[\"payment_table.csv\"]\n    \n    # Check if 'loan_id' and 'payment_amount' columns exist in the payment_table DataFrame\n    if not {\"loan_id\", \"payment_amount\"}.issubset(payment_df.columns):\n        raise KeyError(\"The required columns 'loan_id' and/or 'payment_amount' are missing from 'payment_table.csv'.\")\n    \n    # Ensure the 'loan_id' column exists in the input row\n    if \"loan_id\" not in row:\n        raise KeyError(\"The input row is missing the 'loan_id' column.\")\n    \n    # Filter the payment_table DataFrame for the given loan_id\n    loan_id = row[\"loan_id\"]\n    loan_payments = payment_df[payment_df[\"loan_id\"] == loan_id]\n    \n    # Return the sum of the 'payment_amount' column\n    return loan_payments[\"payment_amount\"].sum()\n"
        },
        "0": {
            "name": "num_late_payments",
            "code": "\n\ndef num_late_payments(row, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Ensure the key 'payment_table.csv' is used to access the payment table\n    if \"payment_table.csv\" not in aux_dataframes:\n        raise KeyError(\"The key 'payment_table.csv' is missing in aux_dataframes.\")\n    \n    payment_df = aux_dataframes[\"payment_table.csv\"]\n    \n    # Filter the payment table for the specific loan_id\n    loan_payments = payment_df[payment_df[\"loan_id\"] == row[\"loan_id\"]]\n    \n    # Count the number of payments with 'payment_status' equal to 'Late'\n    return loan_payments[loan_payments[\"payment_status\"] == \"Late\"].shape[0]\n"
        }
    },
    "feature_descriptions": [
        "total loans customer",
        "avg repayment time customer",
        "payment to loan ratio",
        "loan age",
        "avg loan amount customer",
        "customer financial health",
        "payment frequency success",
        "payment delay trend",
        "ratio successful repayments",
        "avg payment amount",
        "loan payment reliability",
        "total payments",
        "num late payments"
    ]
}